/* -------------------------------------------------------------------------------

   Copyright (C) 1999-2007 id Software, Inc. and contributors.
   For a list of contributors, see the accompanying CONTRIBUTORS file.

   This file is part of GtkRadiant.

   GtkRadiant is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   GtkRadiant is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GtkRadiant; if not, write to the Free Software
   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

   ----------------------------------------------------------------------------------

   This code has been altered significantly from its original form, to support
   several games based on the Quake III Arena engine, in the form of "Q3Map2."

   ------------------------------------------------------------------------------- */



/* dependencies */
#include "q3map2.h"


/*
   EmitShader()
   emits a bsp shader entry
 */

int EmitShader( const char *shader, const int *contentFlags, const int *surfaceFlags ){
	shaderInfo_t    *si;


	/* handle special cases */
	if ( shader == NULL ) {
		shader = "noshader";
	}

	/* try to find an existing shader */
	for ( size_t i = 0; i < bspShaders.size(); ++i )
	{
		/* ydnar: handle custom surface/content flags */
		if ( surfaceFlags != NULL && bspShaders[ i ].surfaceFlags != *surfaceFlags ) {
			continue;
		}
		if ( contentFlags != NULL && bspShaders[ i ].contentFlags != *contentFlags ) {
			continue;
		}
		if ( !doingBSP ){
			si = ShaderInfoForShader( shader );
			if ( !strEmptyOrNull( si->remapShader ) ) {
				shader = si->remapShader;
			}
		}
		/* compare name */
		if ( striEqual( shader, bspShaders[ i ].shader ) ) {
			return i;
		}
	}

	/* get shaderinfo */
	si = ShaderInfoForShader( shader );

	/* emit a new shader */
	const int i = bspShaders.size(); // store index
	bspShader_t& bspShader = bspShaders.emplace_back();

	strcpy( bspShader.shader, si->shader );
	/* handle custom content/surface flags */
	bspShader.surfaceFlags = ( surfaceFlags != NULL )? *surfaceFlags : si->surfaceFlags;
	bspShader.contentFlags = ( contentFlags != NULL )? *contentFlags : si->contentFlags;

	/* recursively emit any damage shaders */
	if ( !strEmptyOrNull( si->damageShader ) ) {
		Sys_FPrintf( SYS_VRB, "Shader %s has damage shader %s\n", si->shader.c_str(), si->damageShader );
		EmitShader( si->damageShader, NULL, NULL );
	}

	/* return index */
	return i;
}



/*
   EmitPlanes()
   there is no opportunity to discard planes, because all of the original
   brushes will be saved in the map
 */

static void EmitPlanes(){
	bspPlanes.reserve( mapplanes.size() );
	/* walk plane list */
	for ( const plane_t& plane : mapplanes )
	{
		bspPlanes.push_back( plane.plane );
	}

	/* emit some statistics */
	Sys_FPrintf( SYS_VRB, "%9zu BSP planes\n", bspPlanes.size() );
}



/*
   EmitLeaf()
   emits a leafnode to the bsp file
 */

static void EmitLeaf( node_t *node ){
	bspLeaf_t& leaf = bspLeafs.emplace_back();

	leaf.cluster = node->cluster;
	leaf.area = node->area;

	/* emit bounding box */
	leaf.minmax.maxs = node->minmax.maxs;
	leaf.minmax.mins = node->minmax.mins;

	/* emit leaf brushes */
	leaf.firstBSPLeafBrush = bspLeafBrushes.size();
	for ( const brush_t& b : node->brushlist )
	{
		bspLeafBrushes.push_back( b.original->outputNum );
	}

	leaf.numBSPLeafBrushes = bspLeafBrushes.size() - leaf.firstBSPLeafBrush;

	/* emit leaf surfaces */
	if ( node->opaque ) {
		return;
	}

	/* add the drawSurfRef_t drawsurfs */
	leaf.firstBSPLeafSurface = bspLeafSurfaces.size();
	for ( const drawSurfRef_t *dsr = node->drawSurfReferences; dsr; dsr = dsr->nextRef )
	{
		bspLeafSurfaces.push_back( dsr->outputNum );
	}

	leaf.numBSPLeafSurfaces = bspLeafSurfaces.size() - leaf.firstBSPLeafSurface;
}


/*
   EmitDrawNode_r()
   recursively emit the bsp nodes
 */

static int EmitDrawNode_r( node_t *node ){
	/* check for leafnode */
	if ( node->planenum == PLANENUM_LEAF ) {
		EmitLeaf( node );
		return -int( bspLeafs.size() );
	}

	/* emit a node */
	const int id = bspNodes.size();
	{
		bspNode_t& bnode = bspNodes.emplace_back();

		bnode.minmax.mins = node->minmax.mins;
		bnode.minmax.maxs = node->minmax.maxs;

		if ( node->planenum & 1 ) {
			Error( "WriteDrawNodes_r: odd planenum" );
		}
		bnode.planeNum = node->planenum;
	}

	//
	// recursively output the other nodes
	//
	for ( int i = 0; i < 2; i++ )
	{
		// reference node by id, as it may be reallocated
		if ( node->children[i]->planenum == PLANENUM_LEAF ) {
			bspNodes[id].children[i] = -int( bspLeafs.size() + 1 );
			EmitLeaf( node->children[i] );
		}
		else
		{
			bspNodes[id].children[i] = bspNodes.size();
			EmitDrawNode_r( node->children[i] );
		}
	}

	return id;
}



/*
   ============
   SetModelNumbers
   ============
 */
void SetModelNumbers(){
	int models = 1;
	for ( std::size_t i = 1; i < entities.size(); ++i ) {
		if ( !entities[i].brushes.empty() || entities[i].patches ) {
			char value[16];
			sprintf( value, "*%i", models );
			models++;
			entities[i].setKeyValue( "model", value );
		}
	}

}




/*
   SetLightStyles()
   sets style keys for entity lights
 */

void SetLightStyles(){
	int j, numStyles;
	char value[ 10 ];
	char lightTargets[ MAX_SWITCHED_LIGHTS ][ 64 ];
	int lightStyles[ MAX_SWITCHED_LIGHTS ];
	int numStrippedLights = 0;

	/* -keeplights option: force lights to be kept and ignore what the map file says */
	if ( keepLights ) {
		entities[0].setKeyValue( "_keepLights", "1" );
	}

	/* ydnar: determine if we keep lights in the bsp */
	entities[ 0 ].read_keyvalue( keepLights, "_keepLights" );

	/* any light that is controlled (has a targetname) must have a unique style number generated for it */
	numStyles = 0;
	for ( std::size_t i = 1; i < entities.size(); ++i )
	{
		entity_t& e = entities[ i ];

		if ( !e.classname_prefixed( "light" ) ) {
			continue;
		}
		const char *t;
		if ( !e.read_keyvalue( t, "targetname" ) ) {
			/* ydnar: strip the light from the BSP file */
			if ( !keepLights ) {
				e.epairs.clear();
				numStrippedLights++;
			}

			/* next light */
			continue;
		}

		/* get existing style */
		const int style = e.intForKey( "style" );
		if ( style < LS_NORMAL || style > LS_NONE ) {
			Error( "Invalid lightstyle (%d) on entity %zu", style, i );
		}

		/* find this targetname */
		for ( j = 0; j < numStyles; j++ )
			if ( lightStyles[ j ] == style && strEqual( lightTargets[ j ], t ) ) {
				break;
			}

		/* add a new style */
		if ( j >= numStyles ) {
			if ( numStyles == MAX_SWITCHED_LIGHTS ) {
				Error( "MAX_SWITCHED_LIGHTS (%d) exceeded, reduce the number of lights with targetnames", MAX_SWITCHED_LIGHTS );
			}
			strcpy( lightTargets[ j ], t );
			lightStyles[ j ] = style;
			numStyles++;
		}

		/* set explicit style */
		sprintf( value, "%d", 32 + j );
		e.setKeyValue( "style", value );

		/* set old style */
		if ( style != LS_NORMAL ) {
			sprintf( value, "%d", style );
			e.setKeyValue( "switch_style", value );
		}
	}

	/* emit some statistics */
	Sys_FPrintf( SYS_VRB, "%9d light entities stripped\n", numStrippedLights );
}



/*
   BeginBSPFile()
   starts a new bsp file
 */

void BeginBSPFile(){
}



/*
   EndBSPFile()
   finishes a new bsp and writes to disk
 */

void EndBSPFile( bool do_write ){
	Sys_FPrintf( SYS_VRB, "--- EndBSPFile ---\n" );

	EmitPlanes();

	numBSPEntities = entities.size();
	UnparseEntities();

	if ( do_write ) {
		/* write the surface extra file */
		WriteSurfaceExtraFile( source );

		/* write the bsp */
		auto path = StringOutputStream( 256 )( source, ".bsp" );
		Sys_Printf( "Writing %s\n", path.c_str() );
		WriteBSPFile( path );
	}
}



/*
   EmitBrushes()
   writes the brush list to the bsp
 */

void EmitBrushes( entity_t& e )
{
	for ( const brush_t &brush : e.brushes )
	{
		for ( const side_t &side : brush.sides )
		{
			Plane3f &plane = bspPlanes.emplace_back();
			plane = (Plane3f)side.plane;
		}
	}
}

/*
   EmitTextureData()
   writes the entitiy partitions
 */
void EmitTextureData(const char* texture)
{
	std::string tex;
	std::size_t index;
	tex = texture;
	tex.erase(tex.begin(), tex.begin() + 9);
	std::replace(tex.begin(), tex.end(), '/', '\\');

	index = tex.find('\\');
	if (index != std::string::npos)
	{
		std::replace(tex.begin(), tex.begin() + index, '_', '\\');
	}

	/* Check if it's already saved */
	std::string table = std::string(bspTextureDataData.begin(), bspTextureDataData.end());
	index = table.find(tex);
	if (index != std::string::npos)
		return;

	/* Add to Table */
	StringOutputStream data;
	data << tex.c_str();
	std::vector<char> str = { data.begin(), data.end() + 1 };

	bspTextureDataTable.emplace_back(bspTextureDataData.size());
	bspTextureDataData.insert(bspTextureDataData.end(), str.begin(), str.end());
}


/*
   EmitEntityPartitions()
   writes the entitiy partitions
 */
void EmitEntityPartitions()
{
	bspEntityPartitions_t& p = bspEntityPartitions.emplace_back();
	memcpy(p.partitions, "01* env fx script snd spawn", 27);
}

/* helpers */
bool VertexLarger( Vector3 a, Vector3 b )
{
	if (a.x() > b.x())
		if (a.y() > b.y())
			if (a.z() > b.z())
				return true;

	return false;
}

struct tempMesh_t
{
	MinMax minmax;
	String64 shader;
	/* Parallel */
	std::vector<Vector3> Vertices;
	std::vector<Vector3> Normals;
	std::vector<Vector2> UVs;

	std::vector<uint16_t> Triangles;
};

bool FloatLargerEqual( float a, float b )
{
	return ( a > b ) || fabs( a - b ) < EQUAL_EPSILON;
}

bool FloatSmallerEqual( float a, float b )
{
	return ( a < b ) || fabs( a - b ) < EQUAL_EPSILON;
}

// I do indeed hate this
// This crap is funny as hell
bool MinMaxIntersecting( MinMax a, MinMax b)
{
	return	( FloatLargerEqual( a.maxs.x(), b.mins.x() ) && FloatSmallerEqual( a.maxs.x(), b.maxs.x() ) ) ||
			( FloatLargerEqual( a.mins.x(), b.mins.x() ) && FloatSmallerEqual( a.mins.x(), b.maxs.x() ) ) ||
			( FloatLargerEqual( a.maxs.y(), b.mins.y() ) && FloatSmallerEqual( a.maxs.y(), b.maxs.y() ) ) ||
			( FloatLargerEqual( a.mins.y(), b.mins.y() ) && FloatSmallerEqual( a.mins.y(), b.maxs.y() ) ) || 
			( FloatLargerEqual( a.maxs.z(), b.mins.z() ) && FloatSmallerEqual( a.maxs.z(), b.maxs.z() ) ) ||
			( FloatLargerEqual( a.mins.z(), b.mins.z() ) && FloatSmallerEqual( a.mins.z(), b.maxs.z() ) );
}

bool VectorsEqual( Vector3 a, Vector3 b )
{
	return	(fabs(a.x() - b.x()) < EQUAL_EPSILON) &&
			(fabs(a.y() - b.y()) < EQUAL_EPSILON) &&
			(fabs(a.z() - b.z()) < EQUAL_EPSILON);

}

float VectorDotProduct(Vector3 v1, Vector3 v2) {
	return v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z();
}

/*
   EmitMeshes()
   writes the mesh list to the bsp
 */
void EmitMeshes( const entity_t& e )
{
	/*
		Each side in radiant can have a different material
		while in the bsp we can only have one material per mesh.

		We get around this by first spliting all brushes/patches into sides,
		then combining the ones with the same material which are touching into
		one bspMesh_t.
	*/
	
	std::vector<tempMesh_t> tempMeshes;
	/* walk list of brushes */
	Sys_FPrintf(SYS_VRB, "brushes\n");
	for (const brush_t& brush : e.brushes)
	{
		/* loop through sides */
		for (const side_t& side : brush.sides)
		{
			/*  */
			if (side.bevel)
				continue;
			
			if (strcmp(side.shaderInfo->shader.c_str(), "textures/common/caulk") == 0)
				continue;

			EmitTextureData(side.shaderInfo->shader.c_str());
			
			tempMesh_t& mesh = tempMeshes.emplace_back();
			mesh.shader = side.shaderInfo->shader;
			/* loop through vertices */
			for (const Vector3& vertex : side.winding)
			{
				/* Check against aabb */
				/* Very cool piece of code I'm really proud of :) */
				if (vertex.x() > mesh.minmax.maxs.x())
					mesh.minmax.maxs.x() = vertex.x();
				if (vertex.y() > mesh.minmax.maxs.y())
					mesh.minmax.maxs.y() = vertex.y();
				if (vertex.z() > mesh.minmax.maxs.z())
					mesh.minmax.maxs.z() = vertex.z();
				
				if (vertex.x() < mesh.minmax.mins.x())
					mesh.minmax.mins.x() = vertex.x();
				if (vertex.y() < mesh.minmax.mins.y())
					mesh.minmax.mins.y() = vertex.y();
				if (vertex.z() < mesh.minmax.mins.z())
					mesh.minmax.mins.z() = vertex.z();
				
				/* Calculate it's UV */
				/* or not */
				Vector2 UV;
				UV.x() = VectorDotProduct( vertex, side.texMat[0] );
				UV.y() = VectorDotProduct( vertex, side.texMat[1] );

				//UV.x() /= mesh.minmax.maxs.x() - mesh.minmax.mins.x();
				//UV.y() /= mesh.minmax.maxs.z() - mesh.minmax.mins.z();

				
				/* Calculate it's normal */
				Vector3 normal;
				std::vector<Vector3> sideNormals;
				for (const side_t& s : brush.sides)
				{
					for (const Vector3& v : s.winding)
					{
						if (VectorCompare(vertex, v))
						{
							normal = Vector3(s.plane.a, s.plane.b, s.plane.c);
							VectorNormalize(normal);
							sideNormals.push_back(normal);
							break;
						}
					}
				}
				
				for (const Vector3& n : sideNormals)
				{
					normal = Vector3(n.x() + normal.x(), n.y() + normal.y(), n.z() + normal.z());
				}
				
				
				VectorNormalize(normal);
				
				/* save */
				mesh.Vertices.emplace_back(vertex);
				mesh.Normals.emplace_back(normal);
				mesh.UVs.emplace_back(UV);
			}
			
			/* Create triangles for side */
			for (std::size_t i = 0; i < side.winding.size() - 2; i++)
			{
				for (int j = 0; j < 3; j++)
				{
					int vert_index = j == 0 ? 0 : i + j;
					mesh.Triangles.emplace_back(vert_index);
				}
			}
		}
	}

	/* walk list of patches */
	Sys_FPrintf(SYS_VRB, "patches\n");
	parseMesh_t* patch = e.patches;
	while (patch != NULL)
	{
		tempMesh_t& mesh = tempMeshes.emplace_back();
		mesh.shader = patch->shaderInfo->shader;

		/* these are the in-editor editable verts, not the mesh you see in-editor ? */
		for (std::size_t i = 0; i < sizeof(patch->mesh.verts); i ++)
		{
			bspDrawVert_t vert = patch->mesh.verts[i];
			mesh.Vertices.emplace_back(vert.xyz);
			mesh.Normals.emplace_back(vert.normal);
			mesh.UVs.emplace_back(vert.st);
		}
		
		
		for (uint16_t i = 0; i < mesh.Vertices.size() - 2; i++)
		{
			mesh.Triangles.emplace_back(i);
		}

		for (Vector3& vertex : mesh.Vertices)
		{
			
			if (vertex.x() > mesh.minmax.maxs.x())
				mesh.minmax.maxs.x() = vertex.x();
			if (vertex.y() > mesh.minmax.maxs.y())
				mesh.minmax.maxs.y() = vertex.y();
			if (vertex.z() > mesh.minmax.maxs.z())
				mesh.minmax.maxs.z() = vertex.z();

			if (vertex.x() < mesh.minmax.mins.x())
				mesh.minmax.mins.x() = vertex.x();
			if (vertex.y() < mesh.minmax.mins.y())
				mesh.minmax.mins.y() = vertex.y();
			if (vertex.z() < mesh.minmax.mins.z())
				mesh.minmax.mins.z() = vertex.z();
		}
		

		patch = patch->next;
	}
	

	/* Loop through meshes and combine the ones touching */
	/* While this isn't fast, it's better than my last approach */
	Sys_FPrintf(SYS_VRB, "combining meshes\n");
	std::size_t index = 0;
	std::size_t iterationsSinceCombine = 0;
	while ( true )
	{
		/* std::out_of_range can't comprehend this  */
		if ( index >= tempMeshes.size() )
			index = 0;

		/* No more meshes to combine; break from the loop */
		if ( iterationsSinceCombine >= tempMeshes.size() )
			break;

		/* Get mesh which we then compare to the rest, maybe combine, maybe not */
		tempMesh_t &mesh1 = tempMeshes.at( index );
		
		for ( std::size_t i = 0; i < tempMeshes.size(); i++ )
		{
			/* We dont want to compare the same mesh */
			if ( index == i )
				continue;
			
			tempMesh_t &mesh2 = tempMeshes.at(i);

			/* check if they have the same shader */
			if ( strcmp( mesh1.shader.c_str(), mesh2.shader.c_str() ) != 0 )
				continue;

			/* Check if they're intersecting */
			if ( !MinMaxIntersecting( mesh1.minmax, mesh2.minmax ) )
				continue;
			

			/* Combine them */
			/* Triangles */
			for ( uint16_t& triIndex : mesh2.Triangles )
			{
				mesh1.Triangles.emplace_back( triIndex + mesh1.Vertices.size() );
			}

			/* All these are parallel so we chillin */
			

			mesh1.Vertices.insert( mesh1.Vertices.end(), mesh2.Vertices.begin(), mesh2.Vertices.end() );

			mesh1.Normals.insert( mesh1.Normals.end(), mesh2.Normals.begin(), mesh2.Normals.end() );

			mesh1.UVs.insert( mesh1.UVs.end(), mesh2.UVs.begin(), mesh2.UVs.end() );
			
			/* aabb */
			for (Vector3& vertex : mesh1.Vertices)
			{
				if (vertex.x() > mesh1.minmax.maxs.x())
					mesh1.minmax.maxs.x() = vertex.x();
				if (vertex.y() > mesh1.minmax.maxs.y())
					mesh1.minmax.maxs.y() = vertex.y();
				if (vertex.z() > mesh1.minmax.maxs.z())
					mesh1.minmax.maxs.z() = vertex.z();

				if (vertex.x() < mesh1.minmax.mins.x())
					mesh1.minmax.mins.x() = vertex.x();
				if (vertex.y() < mesh1.minmax.mins.y())
					mesh1.minmax.mins.y() = vertex.y();
				if (vertex.z() < mesh1.minmax.mins.z())
					mesh1.minmax.mins.z() = vertex.z();
			}
			/* Delete mesh we combined as to not create duplicates */
			tempMeshes.erase( tempMeshes.begin() + i );
			iterationsSinceCombine = 0;
			break;
		}

		iterationsSinceCombine++;
		index++;
	}
	

	/* 
		We now have a list of meshes with matching materials.
		All that's left is converting into bsp structs :)
	*/

	Sys_FPrintf(SYS_VRB, "pain suffering\n");
	for (const tempMesh_t& tempMesh : tempMeshes)
	{
		bspMesh_t& mesh = bspMeshes.emplace_back();
		mesh.const0 = 4294967040; // :)
		mesh.flags = 1051136;
		mesh.first_vertex = bspVertexLitBump.size();
		mesh.vertex_count = tempMesh.Vertices.size();
		mesh.tri_offset = bspMeshIndices.size();
		mesh.tri_count = tempMesh.Triangles.size() / 3;

		MinMax aabb;

		/* Save vertices and vertexnormals */
		for (std::size_t i = 0; i < tempMesh.Vertices.size(); i++)
		{
			Vector3 vertex = tempMesh.Vertices.at(i);
			/* Check against aabb */
			if (vertex.x() > aabb.maxs.x())
				aabb.maxs.x() = vertex.x();
			if (vertex.y() > aabb.maxs.y())
				aabb.maxs.y() = vertex.y();
			if (vertex.z() > aabb.maxs.z())
				aabb.maxs.z() = vertex.z();

			if (vertex.x() < aabb.mins.x())
				aabb.mins.x() = vertex.x();
			if (vertex.y() < aabb.mins.y())
				aabb.mins.y() = vertex.y();
			if (vertex.z() < aabb.mins.z())
				aabb.mins.z() = vertex.z();

			bspVertexLitBump_t& litVertex = bspVertexLitBump.emplace_back();
			litVertex.minus_one = -1;
			litVertex.uv0 = tempMesh.UVs.at(i);

			/* Save vert */
			for (uint16_t j = 0; j < bspVertices.size(); j++)
			{
				if (VectorCompare(vertex, bspVertices.at(j)))
				{
					litVertex.vertex_index = j;
					goto normal;
				}
			}

			{
				litVertex.vertex_index = bspVertices.size();
				bspVertices.emplace_back(tempMesh.Vertices.at(i));
			}

			normal:;

			for (uint16_t j = 0; j < bspVertexNormals.size(); j++)
			{
				if (VectorCompare(tempMesh.Normals.at(i), bspVertexNormals.at(j)))
				{
					litVertex.normal_index = j;
					goto end;
				}
			}

			{
				litVertex.normal_index = bspVertexNormals.size();
				bspVertexNormals.emplace_back(tempMesh.Normals.at(i));
			}

			end:;
		}

		/* Save triangles */
		for (uint16_t triangle : tempMesh.Triangles)
		{
			for (uint32_t j = 0; j < bspVertexLitBump.size(); j++)
			{
				if (VectorCompare(bspVertices.at(bspVertexLitBump.at(j).vertex_index),tempMesh.Vertices.at(triangle)))
				{
					bspMeshIndex_t& index = bspMeshIndices.emplace_back();
					index = j;
					break;
				}
			}
		}

		/* Save MeshBounds */
		bspMeshBounds_t& meshBounds = bspMeshBounds.emplace_back();
		meshBounds.origin = (aabb.maxs + aabb.mins) / 2;
		meshBounds.extents = (aabb.maxs - aabb.mins) / 2;
	}
}
/*
   EmitObjReferences()
   writes obj references used by vis tree
 */
void EmitObjReferences()
{
	/* Meshes */
	for ( uint16_t i = 0; i < bspMeshBounds.size(); i++ )
	{
		bspMeshBounds_t mesh = bspMeshBounds.at( i );

		bspObjReferenceBounds_t& refBounds = bspObjReferenceBounds.emplace_back();
		refBounds.mins = mesh.origin - mesh.extents;
		refBounds.maxs = mesh.origin + mesh.extents;

		bspObjReferences_t& ref = bspObjReferences.emplace_back();
		ref = i;
	}

	/* Props */
	for (uint16_t i = 0; i < GameLump.prop_count; i++)
	{
		bspObjReferenceBounds_t& refBounds = bspObjReferenceBounds.emplace_back();
		refBounds.mins = Vector3(-1000,-1000,-1000);
		refBounds.maxs = Vector3(1000,1000,1000);

		bspObjReferences_t& ref = bspObjReferences.emplace_back();
		ref = bspMeshBounds.size() + i;
	}
}

void EmitModels()
{
	bspModel_t_new &m = bspModels_new.emplace_back();
	m.mesh_count = bspMeshes.size();
}

void EmitLevelInfo()
{
	bspLevelInfo_t &li = bspLevelInfo.emplace_back();
	li.obj_ref_count = bspObjReferenceBounds.size();
	li.unk0 = 1;
	li.unk1 = 1;
	li.prop_count = GameLump.prop_count;
}

void SetUpGameLump()
{
	GameLump.version = 1;
	memcpy( GameLump.magic, "prps", 4 );
	GameLump.const0 = 851968;
}

void EmitProp( const entity_t &e )
{
	const char* p;
	e.read_keyvalue(p, "model");
	char path[128];
	strncpy(path, p, 128);

	uint16_t index = 0;
	bool found = false;
	for ( uint32_t i = 0; i < GameLump.path_count; i++ )
	{
		if ( strncmp(GameLump.paths.at(i).path, path, 128) == 0 )
		{
			found = true;
			break;
		}

		index++;
	}

	if ( !found )
	{
		index = GameLump.paths.size();
		GameLump.path_count++;
		GameLump_Path newPath;
		strncpy(newPath.path, path,128);
		GameLump.paths.emplace_back(newPath);
	}

	GameLump.prop_count++;
	GameLump_Prop& prop = GameLump.props.emplace_back();
	prop.scale = 1;
	prop.fade_scale = -1;
	prop.flags = 84;
	prop.solid_mode = 6;
	prop.cpu_level[0] = -1;
	prop.cpu_level[1] = -1;
	prop.gpu_level[0] = -1;
	prop.gpu_level[1] = -1;
	prop.model_name = index;

}

/* I call this Right click -> copy as c++ array */
void EmitStubs()
{
	/* Entities */
	{
		StringOutputStream data;
		data << "{\n\"world_maxs\" \"3072 3072 -3008\"\n\"world_mins\" \"-3072 -3072 -3072\"\n\"spawnclass\" \"idWorldspawn\"\n\"name\" \"world\"\n\"classname\" \"worldspawn\"\n\"musicpostfix\" \"Waterfront\"\n\"mapversion\" \"30\"}\n";
		bspEntities_stub = { data.begin(), data.end() + 1 };
	}
	/* Planes */
	{
		constexpr std::array<uint8_t, 288> data = {
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xC5,
			0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xC5,
			0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xC5,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xBF, 0x00, 0x00, 0x40, 0xC5,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x40, 0xC5,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xC5,
			0xF3, 0x04, 0x35, 0xBF, 0xF3, 0x04, 0x35, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x30, 0x46, 0xE2, 0x43,
			0xF3, 0x04, 0x35, 0xBF, 0xF3, 0x04, 0x35, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x30, 0x46, 0xE2, 0x43,
			0xF3, 0x04, 0x35, 0x3F, 0xF3, 0x04, 0x35, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x30, 0x46, 0xE2, 0x43,
			0xF3, 0x04, 0x35, 0x3F, 0xF3, 0x04, 0x35, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x30, 0x46, 0xE2, 0x43,
			0xF3, 0x04, 0x35, 0xBF, 0xF3, 0x04, 0x35, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x05, 0x14, 0x13, 0xC3,
			0xF3, 0x04, 0x35, 0xBF, 0xF3, 0x04, 0x35, 0xBF, 0x00, 0x00, 0x00, 0x00, 0xE1, 0xF5, 0x56, 0x43,
			0xF3, 0x04, 0x35, 0x3F, 0xF3, 0x04, 0x35, 0xBF, 0x00, 0x00, 0x00, 0x00, 0xE1, 0xF5, 0x56, 0x43,
			0xF3, 0x04, 0x35, 0x3F, 0xF3, 0x04, 0x35, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x05, 0x14, 0x13, 0xC3,
			0xF3, 0x04, 0x35, 0xBF, 0xF3, 0x04, 0x35, 0x3F, 0x00, 0x00, 0x00, 0x00, 0xB6, 0xC3, 0x87, 0x45,
			0xF3, 0x04, 0x35, 0xBF, 0xF3, 0x04, 0x35, 0xBF, 0x00, 0x00, 0x00, 0x80, 0xB6, 0xC3, 0x87, 0x45,
			0xF3, 0x04, 0x35, 0x3F, 0xF3, 0x04, 0x35, 0xBF, 0x00, 0x00, 0x00, 0x00, 0xB6, 0xC3, 0x87, 0x45,
			0xF3, 0x04, 0x35, 0x3F, 0xF3, 0x04, 0x35, 0x3F, 0x00, 0x00, 0x00, 0x00, 0xB6, 0xC3, 0x87, 0x45
		};
		bspPlanes_stub = { data.begin(), data.end() };
	}
	/* Texture Data */
	{
		constexpr std::array<uint8_t, 180> data = {
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
			0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
			0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x10, 0x06, 0x00, 0x00
		};
		bspTextureData_stub = { data.begin(), data.end() };
	}
	/* Texture Data String Data */
	{
		constexpr std::array<uint8_t, 103> data = {
			0x54, 0x4F, 0x4F, 0x4C, 0x53, 0x5C, 0x54, 0x4F, 0x4F, 0x4C, 0x53, 0x53, 0x4B, 0x59, 0x42, 0x4F,
			0x58, 0x00, 0x57, 0x4F, 0x52, 0x4C, 0x44, 0x5C, 0x44, 0x45, 0x56, 0x5C, 0x44, 0x45, 0x56, 0x5F,
			0x47, 0x52, 0x41, 0x59, 0x5F, 0x35, 0x31, 0x32, 0x00, 0x54, 0x4F, 0x4F, 0x4C, 0x53, 0x5C, 0x54,
			0x4F, 0x4F, 0x4C, 0x53, 0x4E, 0x4F, 0x44, 0x52, 0x41, 0x57, 0x00, 0x54, 0x4F, 0x4F, 0x4C, 0x53,
			0x5C, 0x54, 0x4F, 0x4F, 0x4C, 0x53, 0x43, 0x4C, 0x49, 0x50, 0x00, 0x54, 0x4F, 0x4F, 0x4C, 0x53,
			0x5C, 0x54, 0x4F, 0x4F, 0x4C, 0x53, 0x4C, 0x49, 0x47, 0x48, 0x54, 0x50, 0x52, 0x4F, 0x42, 0x45,
			0x56, 0x4F, 0x4C, 0x55, 0x4D, 0x45, 0x00
		};
		bspTextureDataStringData_stub = { data.begin(), data.end() };
	}
	/* Texture Data String Table */
	{
		constexpr std::array<uint8_t, 20> data = {
			0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x3B, 0x00, 0x00, 0x00,
			0x4B, 0x00, 0x00, 0x00
		};
		bspTextureDataStringTable_stub = { data.begin(), data.end() };
	}
	/* World Lights */
	{
		constexpr std::array<uint8_t, 1008> data = {
			0x00, 0x00, 0xC0, 0x42, 0x00, 0x00, 0x10, 0x42, 0x00, 0x80, 0x82, 0x43, 0xCE, 0xCC, 0x4C, 0x3E,
			0xCE, 0xCC, 0x4C, 0x3E, 0xCE, 0xCC, 0x4C, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xDF, 0x00, 0xC0, 0xC2, 0x99, 0xFB, 0x0F, 0xC2, 0x00, 0x80, 0x82, 0x43, 0xCE, 0xCC, 0x4C, 0x3E,
			0xCE, 0xCC, 0x4C, 0x3E, 0xCE, 0xCC, 0x4C, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC0, 0x42, 0x00, 0x00, 0x10, 0x42, 0x00, 0x80, 0x82, 0x43, 0x00, 0x00, 0x80, 0x40,
			0x00, 0x00, 0x80, 0x40, 0x00, 0x00, 0x80, 0x40, 0x1D, 0xBF, 0xAB, 0xBE, 0x92, 0x8B, 0x06, 0x3F,
			0xFC, 0x25, 0x48, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xDF, 0x00, 0xC0, 0xC2, 0x99, 0xFB, 0x0F, 0xC2, 0x00, 0x80, 0x82, 0x43, 0x00, 0x00, 0x80, 0x40,
			0x00, 0x00, 0x80, 0x40, 0x00, 0x00, 0x80, 0x40, 0xC7, 0xEB, 0x8B, 0x3E, 0xEB, 0xD3, 0x05, 0xBF,
			0x62, 0xB7, 0x4E, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xC2, 0x00, 0x00, 0x60, 0xC1, 0x00, 0x00, 0xC2, 0x42, 0x3A, 0x19, 0x00, 0x46,
			0x4B, 0x16, 0xC3, 0x46, 0xF6, 0x55, 0x08, 0x47, 0x22, 0xD1, 0x18, 0x3E, 0x41, 0x84, 0x52, 0xBF,
			0x41, 0x91, 0x0C, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB2, 0x8F, 0x70, 0x3F,
			0x43, 0x1D, 0xAF, 0x3E, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x48, 0x43, 0x00, 0x00, 0x80, 0x3F,
			0x65, 0xF0, 0x1F, 0xBC, 0x8F, 0xBA, 0xC7, 0x37, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
			0x00, 0x00, 0x18, 0xC2, 0x00, 0x00, 0x85, 0x43, 0x00, 0x00, 0x8E, 0x43, 0xA5, 0x7B, 0x20, 0x47,
			0x27, 0x68, 0xF4, 0x47, 0x7E, 0xCD, 0x2A, 0x48, 0x26, 0x86, 0x6A, 0x3E, 0xD4, 0x96, 0x2B, 0xBF,
			0x60, 0xB5, 0x34, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB2, 0x8F, 0x70, 0x3F,
			0x43, 0x1D, 0xAF, 0x3E, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0xAF, 0x43, 0x00, 0x00, 0x80, 0x3F,
			0x98, 0xC9, 0xB6, 0xBB, 0x63, 0x6F, 0x02, 0x37, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
			0x00, 0x00, 0x2A, 0x43, 0x00, 0x00, 0x56, 0x43, 0x00, 0x00, 0xB4, 0xC2, 0x34, 0x9D, 0xA4, 0x3E,
			0xC6, 0x6B, 0xE7, 0x3E, 0x00, 0xFF, 0xFE, 0x3E, 0x92, 0x2A, 0xB6, 0xBE, 0x60, 0x46, 0x13, 0xBF,
			0x07, 0x8C, 0x3C, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB2, 0x8F, 0x70, 0x3F,
			0x43, 0x1D, 0xAF, 0x3E, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0xC8, 0x43, 0x00, 0x00, 0x80, 0x3F,
			0x54, 0xA9, 0xF9, 0xB8, 0x8F, 0xBA, 0xC7, 0xB6, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
			0x00, 0x00, 0x98, 0xC1, 0x00, 0x00, 0xD8, 0x41, 0x00, 0x00, 0x98, 0xC1, 0x01, 0x40, 0x1C, 0x47,
			0x3C, 0x95, 0xDF, 0x46, 0x06, 0x81, 0x88, 0x46, 0x64, 0xF5, 0x1F, 0x3F, 0xD0, 0x05, 0xFD, 0x3E,
			0x2B, 0xBD, 0x1A, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7D, 0x1B, 0x44, 0x3F,
			0xBA, 0x8D, 0x24, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x96, 0x43, 0x00, 0x00, 0x80, 0x3F,
			0xE3, 0x70, 0x26, 0xB9, 0x63, 0x89, 0x31, 0xB7, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
			0x00, 0x00, 0x92, 0xC2, 0x00, 0x00, 0x4C, 0xC3, 0x00, 0x00, 0x80, 0x41, 0x01, 0x50, 0x43, 0x48,
			0x05, 0xD1, 0x04, 0x48, 0x47, 0xA1, 0xAA, 0x47, 0xEE, 0x1C, 0x0B, 0x3F, 0xD0, 0xB3, 0x32, 0x3F,
			0x14, 0xBD, 0xEE, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7D, 0x1B, 0x44, 0x3F,
			0xBA, 0x8D, 0x24, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x5E, 0x43, 0x00, 0x00, 0x80, 0x3F,
			0x94, 0xEB, 0x60, 0xB9, 0xB5, 0x1A, 0xA2, 0xB7, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F
		};
		bspWorldLights_stub = { data.begin(), data.end() };
	}
	/* Tricoll tris */
	{
		constexpr std::array<uint8_t, 384> data = {
			0x00, 0x08, 0x02, 0x00, 0x01, 0x04, 0x04, 0x40, 0x00, 0x08, 0x02, 0x20, 0x01, 0x04, 0x04, 0x00,
			0x01, 0x08, 0x02, 0x40, 0x00, 0x04, 0x04, 0x40, 0x03, 0x08, 0x02, 0x40, 0x02, 0x04, 0x04, 0x40,
			0x00, 0x10, 0x02, 0x00, 0x01, 0x0C, 0x08, 0x40, 0x02, 0x08, 0x06, 0x10, 0x02, 0x0C, 0x02, 0x50,
			0x00, 0x08, 0x02, 0x20, 0x01, 0x04, 0x04, 0x00, 0x00, 0x08, 0x02, 0x20, 0x01, 0x04, 0x04, 0x00,
			0x00, 0x08, 0x02, 0x20, 0x01, 0x04, 0x04, 0x00, 0x00, 0x08, 0x02, 0x40, 0x01, 0x04, 0x04, 0x40,
			0x00, 0x08, 0x02, 0x40, 0x01, 0x04, 0x04, 0x40, 0x00, 0x08, 0x02, 0x40, 0x01, 0x04, 0x04, 0x40,
			0x02, 0x04, 0x0E, 0x20, 0x03, 0x14, 0x0C, 0x10, 0x04, 0x14, 0x08, 0x40, 0x04, 0x0C, 0x0A, 0x40,
			0x01, 0x1C, 0x10, 0x40, 0x00, 0x20, 0x02, 0x00, 0x04, 0x08, 0x06, 0x50, 0x04, 0x04, 0x04, 0x10,
			0x00, 0x04, 0x04, 0x00, 0x01, 0x08, 0x02, 0x20, 0x02, 0x08, 0x06, 0x00, 0x02, 0x04, 0x04, 0x40,
			0x01, 0x20, 0x0E, 0x40, 0x00, 0x04, 0x10, 0x40, 0x04, 0x14, 0x02, 0x40, 0x04, 0x10, 0x0A, 0x40,
			0x03, 0x18, 0x0A, 0x10, 0x02, 0x1C, 0x02, 0x50, 0x04, 0x04, 0x04, 0x20, 0x04, 0x08, 0x06, 0x10,
			0x01, 0x04, 0x04, 0x40, 0x00, 0x08, 0x02, 0x00, 0x03, 0x04, 0x04, 0x40, 0x02, 0x08, 0x02, 0x40,
			0x00, 0x08, 0x02, 0x40, 0x01, 0x04, 0x04, 0x40, 0x00, 0x08, 0x02, 0x40, 0x01, 0x04, 0x04, 0x40,
			0x00, 0x04, 0x04, 0x40, 0x01, 0x08, 0x02, 0x40, 0x02, 0x04, 0x04, 0x20, 0x03, 0x08, 0x02, 0x10,
			0x00, 0x08, 0x02, 0x40, 0x01, 0x04, 0x04, 0x40, 0x00, 0x08, 0x02, 0x00, 0x01, 0x04, 0x04, 0x40,
			0x01, 0x04, 0x04, 0x40, 0x00, 0x08, 0x02, 0x40, 0x02, 0x08, 0x02, 0x50, 0x03, 0x04, 0x04, 0x10,
			0x01, 0x10, 0x06, 0x40, 0x00, 0x04, 0x08, 0x40, 0x02, 0x0C, 0x02, 0x50, 0x03, 0x08, 0x02, 0x10,
			0x00, 0x08, 0x02, 0x00, 0x01, 0x04, 0x04, 0x40, 0x00, 0x08, 0x02, 0x00, 0x01, 0x04, 0x04, 0x40,
			0x00, 0x08, 0x02, 0x20, 0x01, 0x04, 0x04, 0x00, 0x00, 0x08, 0x02, 0x00, 0x01, 0x04, 0x04, 0x40,
			0x00, 0x08, 0x02, 0x40, 0x01, 0x04, 0x04, 0x40, 0x00, 0x08, 0x02, 0x20, 0x01, 0x04, 0x04, 0x00,
			0x00, 0x08, 0x02, 0x00, 0x01, 0x04, 0x04, 0x40, 0x00, 0x08, 0x02, 0x00, 0x01, 0x04, 0x04, 0x40,
			0x04, 0x08, 0x02, 0x10, 0x02, 0x08, 0x06, 0x20, 0x00, 0x08, 0x02, 0x20, 0x01, 0x04, 0x08, 0x00,
			0x01, 0x14, 0x0C, 0x40, 0x01, 0x10, 0x0A, 0x40, 0x00, 0x10, 0x04, 0x40, 0x00, 0x0C, 0x08, 0x40,
			0x03, 0x10, 0x02, 0x50, 0x04, 0x0C, 0x04, 0x10, 0x00, 0x08, 0x02, 0x40, 0x01, 0x04, 0x04, 0x40
		};
		bspTricollTris_stub = { data.begin(), data.end() };
	}
	/* Tricoll Nodes */
	{
		constexpr std::array<uint8_t, 704> data = {
			0x00, 0x00, 0x80, 0xFD, 0x00, 0x00, 0x00, 0x80, 0x01, 0x78, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xFD, 0x00, 0x00, 0x00, 0x80, 0x01, 0x78, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x80, 0x01, 0x78, 0x81, 0x02, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x80, 0x01, 0x78, 0x81, 0x02, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0xFD, 0x00, 0x80, 0x01, 0x78, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0xFD, 0x00, 0x80, 0x01, 0x78, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x80, 0x01, 0x78, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x80, 0x01, 0x78, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
			0x80, 0xFD, 0x00, 0x00, 0x00, 0x78, 0x00, 0x80, 0x00, 0x00, 0x01, 0x78, 0x80, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0x75, 0x00, 0x80, 0x81, 0x02, 0x01, 0x78, 0x00, 0x00, 0x00, 0x00,
			0x80, 0xFD, 0x00, 0x00, 0x80, 0xFD, 0x00, 0x80, 0x00, 0x00, 0x01, 0x78, 0x00, 0x78, 0x00, 0x00,
			0x80, 0x02, 0x00, 0x00, 0x80, 0xFD, 0x00, 0x80, 0x00, 0x00, 0x01, 0x78, 0x00, 0x78, 0x00, 0x00,
			0x40, 0x01, 0xC0, 0xFE, 0x00, 0x00, 0x00, 0x80, 0x81, 0x02, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
			0x40, 0x01, 0xC0, 0xFE, 0x00, 0x00, 0x00, 0x80, 0x81, 0x02, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
			0xC0, 0xFE, 0x40, 0x01, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x81, 0x02, 0x00, 0x78, 0x00, 0x00,
			0xC0, 0xFE, 0x40, 0x01, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x81, 0x02, 0x00, 0x78, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xFD, 0x80, 0xFD, 0x00, 0x80, 0x01, 0x78, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0x75, 0x00, 0x80, 0x01, 0x78, 0x81, 0x02, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xFD, 0x00, 0x78, 0x00, 0x80, 0x01, 0x78, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x80, 0x02, 0x80, 0xFD, 0x00, 0x80, 0x01, 0x78, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xFD, 0x00, 0x00, 0x00, 0x80, 0x01, 0x78, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xFD, 0x00, 0x00, 0x00, 0x80, 0x01, 0x78, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x80, 0x01, 0x78, 0x81, 0x02, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x80, 0x01, 0x78, 0x81, 0x02, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x80, 0x81, 0x02, 0x01, 0x78, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x80, 0x81, 0x02, 0x01, 0x78, 0x00, 0x00, 0x00, 0x00,
			0x80, 0xFD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x78, 0x80, 0x02, 0x00, 0x00,
			0x80, 0xFD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x78, 0x80, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x80, 0x81, 0x02, 0x01, 0x78, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x80, 0x81, 0x02, 0x01, 0x78, 0x00, 0x00, 0x00, 0x00,
			0x80, 0xFD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x78, 0x00, 0x78, 0x00, 0x00,
			0x80, 0xFD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x78, 0x00, 0x78, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0xFD, 0x00, 0x80, 0x00, 0x00, 0x01, 0x78, 0x00, 0x78, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0xFD, 0x00, 0x80, 0x00, 0x00, 0x01, 0x78, 0x00, 0x78, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x80, 0x00, 0x00, 0x01, 0x78, 0x80, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x80, 0x00, 0x00, 0x01, 0x78, 0x80, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x10, 0x01, 0x10, 0x00, 0x10, 0x00, 0x00,
			0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x10, 0x00, 0x10, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x80, 0x01, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x80, 0x01, 0x10, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x08, 0x00, 0xF8, 0x00, 0x10, 0x7E, 0xA5, 0xA1, 0x16, 0x51, 0x0B, 0x00, 0x00, 0x7E, 0xA5,
			0x00, 0xF8, 0x00, 0x08, 0x00, 0x10, 0x7E, 0xA5, 0xA1, 0x16, 0x51, 0x0B, 0x00, 0x00, 0x7E, 0xA5,
			0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x80, 0x01, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x80, 0x01, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
		};
		bspTricollNodes_stub = { data.begin(), data.end() };
	}
	/* Tricoll Headers */
	{
		constexpr std::array<uint8_t, 1364> data = {
			0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04,
			0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x06, 0x00,
			0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0xF5, 0x46, 0x00, 0x00, 0x00, 0x80,
			0x00, 0x00, 0x20, 0x41, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00,
			0x0F, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0xF0, 0x46, 0x00, 0x00, 0x20, 0xC4, 0x00, 0x00, 0x20, 0x41,
			0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
			0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04,
			0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00,
			0x02, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00,
			0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,
			0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04,
			0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x0A, 0x00,
			0x08, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5, 0xC6, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x20, 0xC4,
			0x00, 0x00, 0x20, 0x41, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00,
			0x37, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x80, 0xF2, 0xC6, 0x00, 0x80, 0xF2, 0xC6, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x20, 0x41,
			0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x0A, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00,
			0x24, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
			0x00, 0x00, 0xF5, 0xC6, 0x00, 0x00, 0x20, 0xC4, 0x00, 0x00, 0x20, 0x41, 0x00, 0x00, 0x04, 0x04,
			0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00,
			0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0xF5, 0xC6,
			0x00, 0x00, 0xF5, 0x46, 0x00, 0x00, 0x20, 0x41, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00,
			0x02, 0x00, 0x00, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00,
			0x51, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00,
			0x34, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5, 0xC6,
			0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0xF5, 0x46, 0x00, 0x00, 0x20, 0x41, 0x00, 0x00, 0x04, 0x04,
			0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5B, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00,
			0x02, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00,
			0x63, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xF5, 0x46, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x20, 0x41,
			0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00,
			0x40, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x46,
			0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x20, 0xC4, 0x00, 0x00, 0x20, 0x41, 0x00, 0x00, 0x04, 0x04,
			0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x6F, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00,
			0x02, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x06, 0x02, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00,
			0x77, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x80, 0x06, 0x02, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x00,
			0x4A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x06,
			0x02, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x06, 0x02, 0x00, 0x04, 0x00,
			0x02, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x06, 0x02, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00,
			0x87, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x0A, 0x01, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00,
			0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,
			0x01, 0x00, 0x08, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x8F, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00,
			0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0xA8, 0x47,
			0x00, 0x00, 0x3F, 0x49, 0x00, 0x00, 0x80, 0x43, 0x00, 0x00, 0x00, 0x0A, 0x01, 0x00, 0x04, 0x00,
			0x02, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00, 0x5E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00
		};
		bspTricollHeaders_stub = { data.begin(), data.end() };
	}
	/* Material Sort */
	{
		constexpr std::array<uint8_t, 36> data = {
			0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x17, 0x00,
			0x00, 0x00, 0x00, 0x00
		};
		bspMaterialSort_stub = { data.begin(), data.end() };
	}
	/* LightMap Headers */
	{
		constexpr std::array<uint8_t, 8> data = {
			0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x80, 0x00
		};
		bspLightMapHeaders_stub = { data.begin(), data.end() };
	}
	/* CM Grid */
	{
		constexpr std::array<uint8_t, 28> data = {
			0x00, 0x00, 0x30, 0x44, 0xFB, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0x0A, 0x00, 0x00, 0x00,
			0x0A, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00
		};
		bspCMGrid_stub = { data.begin(), data.end() };
	}
	/* CM Grid Cells */
	{
		constexpr std::array<uint8_t, 404> data = {
			0x00, 0x00, 0x01, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x02, 0x00, 0x02, 0x00, 0x04, 0x00, 0x02, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x02, 0x00, 0x01, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x07, 0x00, 0x01, 0x00,
			0x08, 0x00, 0x05, 0x00
		};
		bspCMGridCells_stub = { data.begin(), data.end() };
	}
	/* CM Grid Sets */
	{
		constexpr std::array<uint8_t, 104> data = {
			0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x02, 0x00, 0x00,
			0x01, 0x00, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x06, 0x00, 0x00,
			0x01, 0x00, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x06, 0x00, 0x00,
			0x00, 0x00, 0x02, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x0B, 0x00, 0x40,
			0x00, 0x00, 0x04, 0x00, 0x01, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x0E, 0x00, 0x00,
			0x00, 0x00, 0x04, 0x00, 0x01, 0x12, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x16, 0x00, 0x00,
			0x00, 0x00, 0x06, 0x00, 0x02, 0x1A, 0x00, 0x00
		};
		bspCMGridSets_stub = { data.begin(), data.end() };
	}
	/* CM Geo Set Bounds */
	{
		constexpr std::array<uint8_t, 208> data = {
			0xE0, 0xF3, 0xE0, 0xF3, 0x00, 0x00, 0x7E, 0xA5, 0x5B, 0x00, 0x2E, 0x00, 0x00, 0x0C, 0x82, 0x5A,
			0x20, 0x0C, 0xE0, 0xF3, 0x00, 0x00, 0x7E, 0xA5, 0x5B, 0x00, 0x2E, 0x00, 0x00, 0x0C, 0x7E, 0xA5,
			0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x80, 0x41, 0x01, 0x41, 0x01, 0x18, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xB0, 0xFE, 0x10, 0xF4, 0x00, 0x80, 0x11, 0x00, 0x11, 0x00, 0x10, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x80, 0x41, 0x01, 0x41, 0x01, 0x18, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xB0, 0xFE, 0x10, 0xF4, 0x00, 0x80, 0x11, 0x00, 0x11, 0x00, 0x10, 0x00, 0x00, 0x00,
			0xE0, 0xF3, 0x20, 0x0C, 0x00, 0x00, 0x7E, 0xA5, 0x5B, 0x00, 0x2E, 0x00, 0x00, 0x0C, 0x7E, 0xA5,
			0x20, 0x0C, 0x20, 0x0C, 0x00, 0x00, 0x7E, 0xA5, 0x5B, 0x00, 0x2E, 0x00, 0x00, 0x0C, 0x82, 0x5A,
			0x00, 0x00, 0xC0, 0xF3, 0x00, 0x00, 0x00, 0x80, 0x01, 0x0C, 0x41, 0x00, 0x80, 0x0C, 0x00, 0x00,
			0x40, 0x00, 0x40, 0x00, 0xC0, 0xF3, 0x00, 0x80, 0x41, 0x0C, 0x41, 0x0C, 0x40, 0x00, 0x00, 0x00,
			0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x80, 0x41, 0x0C, 0x41, 0x0C, 0x40, 0x0C, 0x00, 0x00,
			0xC0, 0xF3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x00, 0x01, 0x0C, 0x80, 0x0C, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x20, 0xF4, 0x00, 0x80, 0x01, 0x0C, 0x01, 0x0C, 0x20, 0x00, 0x00, 0x00
		};
		bspCMGeoSetBounds_stub = { data.begin(), data.end() };
	}
	/* CM Primitives */
	{
		constexpr std::array<uint8_t, 128> data = {
			0x01, 0x00, 0x00, 0x40, 0x01, 0x01, 0x00, 0x40, 0x01, 0x04, 0x00, 0x40, 0x01, 0x05, 0x00, 0x40,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x1D, 0x00, 0x40, 0x02, 0x1C, 0x00, 0x40,
			0x01, 0x16, 0x00, 0x40, 0x01, 0x15, 0x00, 0x40, 0x01, 0x02, 0x00, 0x40, 0x01, 0x03, 0x00, 0x40,
			0x01, 0x06, 0x00, 0x40, 0x01, 0x07, 0x00, 0x40, 0x01, 0x10, 0x00, 0x40, 0x01, 0x0F, 0x00, 0x40,
			0x01, 0x0E, 0x00, 0x40, 0x01, 0x0D, 0x00, 0x40, 0x01, 0x08, 0x00, 0x40, 0x01, 0x0C, 0x00, 0x40,
			0x01, 0x09, 0x00, 0x40, 0x01, 0x0A, 0x00, 0x40, 0x01, 0x14, 0x00, 0x40, 0x01, 0x13, 0x00, 0x40,
			0x01, 0x12, 0x00, 0x40, 0x01, 0x11, 0x00, 0x40, 0x02, 0x1E, 0x00, 0x40, 0x02, 0x1B, 0x00, 0x40,
			0x02, 0x1A, 0x00, 0x40, 0x02, 0x19, 0x00, 0x40, 0x02, 0x18, 0x00, 0x40, 0x02, 0x17, 0x00, 0x40
		};
		bspCMPrimitives_stub = { data.begin(), data.end() };
	}
	/* CM Primitive Bounds */
	{
		constexpr std::array<uint8_t, 512> data = {
			0x00, 0xF4, 0xC0, 0xF3, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x41, 0x00, 0x00, 0x0C, 0x00, 0x00,
			0xC0, 0xF3, 0x00, 0xF4, 0x00, 0x00, 0x00, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00,
			0x00, 0x0C, 0xC0, 0xF3, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x41, 0x00, 0x00, 0x0C, 0x00, 0x00,
			0x40, 0x0C, 0x00, 0xF4, 0x00, 0x00, 0x00, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x00, 0x80, 0x41, 0x01, 0x41, 0x01, 0x08, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xFF, 0x10, 0x00, 0x00, 0x80, 0x19, 0x00, 0x19, 0x00, 0x10, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xB0, 0xFE, 0x10, 0xF4, 0x00, 0x80, 0x11, 0x00, 0x11, 0x00, 0x10, 0x00, 0x00, 0x00,
			0xF0, 0xFF, 0xB0, 0xFE, 0x10, 0xF4, 0x00, 0x80, 0x00, 0x00, 0x11, 0x00, 0x10, 0x00, 0x00, 0x00,
			0xC0, 0xF3, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00,
			0x00, 0xF4, 0x40, 0x0C, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x41, 0x00, 0x00, 0x0C, 0x00, 0x00,
			0x00, 0x00, 0xC0, 0xF3, 0x00, 0x00, 0x00, 0x80, 0x01, 0x0C, 0x41, 0x00, 0x00, 0x0C, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xF4, 0x40, 0x00, 0x00, 0x80, 0x01, 0x0C, 0x00, 0x00, 0x40, 0x0C, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xF4, 0xC0, 0xF3, 0x00, 0x80, 0x01, 0x0C, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC0, 0xF3, 0x00, 0xF4, 0x00, 0x80, 0x01, 0x0C, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x40, 0x0C, 0x00, 0x00, 0xC0, 0xF3, 0x00, 0x80, 0x41, 0x00, 0x01, 0x0C, 0x40, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0xF4, 0x00, 0x80, 0x01, 0x0C, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0xF3, 0x00, 0x80, 0x01, 0x0C, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x40, 0x0C, 0xC0, 0xF3, 0x00, 0x80, 0x01, 0x0C, 0x41, 0x00, 0x40, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x80, 0x01, 0x0C, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x40, 0x0C, 0x40, 0x00, 0x00, 0x80, 0x01, 0x0C, 0x41, 0x00, 0x40, 0x0C, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x80, 0x01, 0x0C, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00,
			0x40, 0x0C, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x41, 0x00, 0x01, 0x0C, 0x40, 0x0C, 0x00, 0x00,
			0x00, 0xF4, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x0C, 0x40, 0x0C, 0x00, 0x00,
			0xC0, 0xF3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x00, 0x01, 0x0C, 0x00, 0x0C, 0x00, 0x00,
			0x00, 0xF4, 0x00, 0x00, 0xC0, 0xF3, 0x00, 0x80, 0x00, 0x00, 0x01, 0x0C, 0x40, 0x00, 0x00, 0x00,
			0xC0, 0xF3, 0x00, 0x00, 0x00, 0xF4, 0x00, 0x80, 0x41, 0x00, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x40, 0xF4, 0x00, 0x80, 0x01, 0x0C, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00,
			0x00, 0xF4, 0x00, 0x00, 0x20, 0xF4, 0x00, 0x80, 0x00, 0x00, 0x01, 0x0C, 0x20, 0x00, 0x00, 0x00,
			0x00, 0x0C, 0x00, 0x00, 0x20, 0xF4, 0x00, 0x80, 0x00, 0x00, 0x01, 0x0C, 0x20, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0xF4, 0x00, 0x80, 0x01, 0x0C, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x0C, 0x20, 0xF4, 0x00, 0x80, 0x01, 0x0C, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xF4, 0x20, 0xF4, 0x00, 0x80, 0x01, 0x0C, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00
		};
		bspCMPrimitiveBounds_stub = { data.begin(), data.end() };
	}
	/* CM Unique Contents */
	{
		constexpr std::array<uint8_t, 12> data = {
			0x00, 0x00, 0xA3, 0x00, 0x80, 0x02, 0xFB, 0x00, 0x80, 0x02, 0xEB, 0x00
		};
		bspCMUniqueContents_stub = { data.begin(), data.end() };
	}
	/* CM Brushes */
	{
		constexpr std::array<uint8_t, 96> data = {
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0xA0, 0x43, 0x00, 0x00, 0xA0, 0x43, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC3, 0x00, 0x00, 0x80, 0x41, 0x00, 0x04, 0x01, 0x00,
			0x00, 0x00, 0xC0, 0x41, 0x00, 0x00, 0xC0, 0x41, 0x00, 0x00, 0x80, 0x41, 0x04, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00,
			0x00, 0x00, 0x40, 0x45, 0x00, 0x00, 0x40, 0x45, 0x00, 0x00, 0x40, 0x45, 0x08, 0x00, 0x00, 0x00
		};
		bspCMBrushes_stub = { data.begin(), data.end() };
	}
	/* CM Brush Side Plane Offsets */
	{
		constexpr std::array<uint8_t, 24> data = {
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};
		bspCMBrushSidePlaneOffsets_stub = { data.begin(), data.end() };
	}
	/* CM Brush Side Props */
	{
		constexpr std::array<uint8_t, 60> data = {
			0x03, 0x80, 0x03, 0x80, 0x03, 0x80, 0x03, 0x80, 0x03, 0x00, 0x03, 0x00, 0x03, 0x40, 0x03, 0x40,
			0x03, 0x40, 0x03, 0x40, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00,
			0x03, 0x40, 0x03, 0x40, 0x03, 0x40, 0x03, 0x40, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00,
			0x04, 0x00, 0x04, 0x00, 0x04, 0x40, 0x04, 0x40, 0x04, 0x40, 0x04, 0x40
		};
		bspCMBrushSideProps_stub = { data.begin(), data.end() };
	}
	/* CM Brush Tex Vecs */
	{
		constexpr std::array<uint8_t, 960> data = {
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x43,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x43,
			0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x43,
			0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x43,
			0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x43,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x43,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x43,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x43,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x46,
			0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x60, 0x46,
			0x00, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x45,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x46,
			0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x46,
			0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x45,
			0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC1, 0x00, 0x00, 0x19, 0x46,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x49, 0x46,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC1, 0x00, 0x00, 0x19, 0x46,
			0x00, 0x00, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xD2, 0x45,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0xC1, 0x00, 0x00, 0x19, 0x46,
			0x00, 0x00, 0x80, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x56, 0x46,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0xC1, 0x00, 0x00, 0x19, 0x46,
			0x00, 0x00, 0x80, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x56, 0x46,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC1, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x5B, 0x45,
			0x00, 0x00, 0x80, 0xC1, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x56, 0x46,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x00, 0x00, 0x00, 0x80, 0x00, 0x40, 0x49, 0x46,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x45,
			0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC1, 0x00, 0x00, 0x19, 0x46,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x45,
			0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC1, 0x00, 0x00, 0x19, 0x46,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x49, 0x46,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC1, 0x00, 0x00, 0x19, 0x46,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x49, 0x46,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC1, 0x00, 0x00, 0x19, 0x46
		};
		bspCMBrushTexVecs_stub = { data.begin(), data.end() };
	}
	/* Tricoll Bevel Starts */
	{
		constexpr std::array<uint8_t, 192> data = {
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};
		bspTricollBevelStarts_stub = { data.begin(), data.end() };
	}
	/* LightMap Data Sky */
	{
		for (std::size_t i = 0; i < 524288; i++)
		{
			bspLightMapDataSky_stub.emplace_back(0);
		}
	}
	/* CSM AABB Nodes */
	{
		constexpr std::array<uint8_t, 64> data = {
			0xFF, 0xFF, 0x7F, 0x7F, 0xFF, 0xFF, 0x7F, 0x7F, 0xFF, 0xFF, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0x7F, 0x7F, 0xFF, 0xFF, 0x7F, 0x7F, 0xFF, 0xFF, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00
		};
		bspCSMAABBNodes_stub = { data.begin(), data.end() };
	}
	/* Cell BSP Nodes */
	{
		constexpr std::array<uint8_t, 8> data = {
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00
		};
		bspCellBSPNodes_stub = { data.begin(), data.end() };
	}
	/* Cells */
	{
		constexpr std::array<uint8_t, 8> data = {
			0x06, 0x00, 0x00, 0x00, 0x05, 0x00, 0xFF, 0xFF
		};
		bspCells_stub = { data.begin(), data.end() };
	}
	/* Portals */
	{
		constexpr std::array<uint8_t, 72> data = {
			0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00,
			0x04, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x08, 0x00, 0x02, 0x00,
			0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x0C, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00,
			0x00, 0x01, 0x04, 0x00, 0x10, 0x00, 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00,
			0x14, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00
		};
		bspPortals_stub = { data.begin(), data.end() };
	}
	/* Portal Vertices */
	{
		constexpr std::array<uint8_t, 108> data = {
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x45,
			0x00, 0x00, 0x40, 0x45, 0x00, 0x00, 0x40, 0xC5, 0x00, 0x00, 0x40, 0x45, 0x00, 0x00, 0x40, 0x45,
			0x00, 0x00, 0x40, 0x45, 0x00, 0x00, 0x40, 0xC5, 0x00, 0x00, 0x40, 0x45, 0x00, 0x00, 0x40, 0x45,
			0x00, 0x00, 0x40, 0xC5, 0x00, 0x00, 0x40, 0x45, 0x00, 0x00, 0x40, 0xC5, 0x00, 0x00, 0x40, 0x45,
			0x00, 0x00, 0x40, 0xC5, 0x00, 0x00, 0x40, 0x45, 0x00, 0x00, 0x40, 0x45, 0x00, 0x00, 0x40, 0xC5,
			0x00, 0x00, 0x40, 0xC5, 0x00, 0x00, 0x40, 0xC5, 0x00, 0x00, 0x40, 0xC5, 0x00, 0x00, 0x40, 0xC5,
			0x00, 0x00, 0x40, 0xC5, 0x00, 0x00, 0x40, 0xC5, 0x00, 0x00, 0x40, 0x45
		};
		bspPortalVertices_stub = { data.begin(), data.end() };
	}
	/* Portal Edges */
	{
		constexpr std::array<uint8_t, 48> data = {
			0x04, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x03, 0x00, 0x03, 0x00, 0x04, 0x00,
			0x06, 0x00, 0x05, 0x00, 0x05, 0x00, 0x02, 0x00, 0x01, 0x00, 0x06, 0x00, 0x08, 0x00, 0x07, 0x00,
			0x07, 0x00, 0x04, 0x00, 0x03, 0x00, 0x08, 0x00, 0x05, 0x00, 0x08, 0x00, 0x07, 0x00, 0x06, 0x00
		};
		bspPortalEdges_stub = { data.begin(), data.end() };
	}
	/* Portal Vertex Edges */
	{
		constexpr std::array<uint8_t, 144> data = {
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x01, 0x00, 0x06, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x01, 0x00, 0x02, 0x00, 0x05, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x02, 0x00, 0x03, 0x00, 0x09, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x03, 0x00, 0x08, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x04, 0x00, 0x05, 0x00, 0x0A, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x04, 0x00, 0x06, 0x00, 0x0B, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x07, 0x00, 0x08, 0x00, 0x0B, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x07, 0x00, 0x09, 0x00, 0x0A, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
		};
		bspPortalVertexEdges_stub = { data.begin(), data.end() };
	}
	/* Portal Vertex References */
	{
		constexpr std::array<uint8_t, 48> data = {
			0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00, 0x02, 0x00, 0x01, 0x00, 0x06, 0x00,
			0x07, 0x00, 0x04, 0x00, 0x03, 0x00, 0x08, 0x00, 0x03, 0x00, 0x02, 0x00, 0x05, 0x00, 0x08, 0x00,
			0x06, 0x00, 0x01, 0x00, 0x04, 0x00, 0x07, 0x00, 0x08, 0x00, 0x05, 0x00, 0x06, 0x00, 0x07, 0x00
		};
		bspPortalVertexReferences_stub = { data.begin(), data.end() };
	}
	/* Portal Edge References */
	{
		constexpr std::array<uint8_t, 48> data = {
			0x00, 0x00, 0x02, 0x00, 0x04, 0x00, 0x06, 0x00, 0x08, 0x00, 0x0A, 0x00, 0x03, 0x00, 0x0C, 0x00,
			0x0E, 0x00, 0x10, 0x00, 0x07, 0x00, 0x12, 0x00, 0x13, 0x00, 0x05, 0x00, 0x0B, 0x00, 0x14, 0x00,
			0x16, 0x00, 0x0D, 0x00, 0x01, 0x00, 0x11, 0x00, 0x0F, 0x00, 0x15, 0x00, 0x09, 0x00, 0x17, 0x00
		};
		bspPortalEdgeReferences_stub = { data.begin(), data.end() };
	}
	/* Portal Edge Intersect Edge */
	{
		constexpr std::array<uint8_t, 192> data = {
			0x01, 0x00, 0x03, 0x00, 0x06, 0x00, 0x08, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x02, 0x00, 0x05, 0x00, 0x06, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x01, 0x00, 0x03, 0x00, 0x05, 0x00, 0x09, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x09, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x05, 0x00, 0x06, 0x00, 0x0A, 0x00, 0x0B, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x0A, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x0B, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x08, 0x00, 0x09, 0x00, 0x0A, 0x00, 0x0B, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x03, 0x00, 0x07, 0x00, 0x0B, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x02, 0x00, 0x03, 0x00, 0x07, 0x00, 0x0A, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x04, 0x00, 0x05, 0x00, 0x07, 0x00, 0x09, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x04, 0x00, 0x06, 0x00, 0x07, 0x00, 0x08, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
		};
		bspPortalEdgeIntersectEdge_stub = { data.begin(), data.end() };
	}
	/* Portal Edge Intersect At Vertex */
	{
		constexpr std::array<uint8_t, 192> data = {
			0x01, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x02, 0x00, 0x03, 0x00, 0x02, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x04, 0x00, 0x03, 0x00, 0x04, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x05, 0x00, 0x06, 0x00, 0x05, 0x00, 0x06, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x02, 0x00, 0x02, 0x00, 0x05, 0x00, 0x05, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x01, 0x00, 0x01, 0x00, 0x06, 0x00, 0x06, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x07, 0x00, 0x08, 0x00, 0x08, 0x00, 0x07, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x04, 0x00, 0x04, 0x00, 0x07, 0x00, 0x07, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x03, 0x00, 0x03, 0x00, 0x08, 0x00, 0x08, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x05, 0x00, 0x05, 0x00, 0x08, 0x00, 0x08, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x06, 0x00, 0x06, 0x00, 0x07, 0x00, 0x07, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
		};
		bspPortalEdgeIntersectAtVertex_stub = { data.begin(), data.end() };
	}
	/* Portal Edge Intersect Header */
	{
		constexpr std::array<uint8_t, 96> data = {
			0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
			0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
			0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
			0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
			0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
			0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00
		};
		bspPortalEdgeIntersectHeader_stub = { data.begin(), data.end() };
	}
	/* Cell AABB Nodes */
	{
		CellAABBNode_t &node = bspCellAABBNodes_stub.emplace_back();
		node.mins = Vector3(-3000, -3000, -3000);
		node.maxs = Vector3(3000, 3000, 3000);
		node.obj_ref_count = bspObjReferences.size() > 255 ? 255 : bspObjReferences.size();
	}
}
/*
   BeginModel()
   sets up a new brush model
 */

void BeginModel( const entity_t& e ){

}




/*
   EndModel()
   finish a model's processing
 */

void EndModel( const entity_t& e, node_t *headnode ){
	
}
