/* -------------------------------------------------------------------------------

   Copyright (C) 1999-2007 id Software, Inc. and contributors.
   For a list of contributors, see the accompanying CONTRIBUTORS file.

   This file is part of GtkRadiant.

   GtkRadiant is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   GtkRadiant is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GtkRadiant; if not, write to the Free Software
   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

   ----------------------------------------------------------------------------------

   This code has been altered significantly from its original form, to support
   several games based on the Quake III Arena engine, in the form of "Q3Map2."

   ------------------------------------------------------------------------------- */



/* dependencies */
#include "remap.h"
#include "bspfile_abstract.h"


/*
   EmitShader()
   emits a bsp shader entry
 */

int EmitShader( const char *shader, const int *contentFlags, const int *surfaceFlags ){
	shaderInfo_t    *si;


	/* handle special cases */
	if ( shader == NULL ) {
		shader = "noshader";
	}

	/* try to find an existing shader */
	for ( size_t i = 0; i < bspShaders.size(); ++i )
	{
		/* ydnar: handle custom surface/content flags */
		if ( surfaceFlags != NULL && bspShaders[ i ].surfaceFlags != *surfaceFlags ) {
			continue;
		}
		if ( contentFlags != NULL && bspShaders[ i ].contentFlags != *contentFlags ) {
			continue;
		}
		if ( !doingBSP ){
			si = ShaderInfoForShader( shader );
			if ( !strEmptyOrNull( si->remapShader ) ) {
				shader = si->remapShader;
			}
		}
		/* compare name */
		if ( striEqual( shader, bspShaders[ i ].shader ) ) {
			return i;
		}
	}

	/* get shaderinfo */
	si = ShaderInfoForShader( shader );

	/* emit a new shader */
	const int i = bspShaders.size(); // store index
	bspShader_t& bspShader = bspShaders.emplace_back();

	strcpy( bspShader.shader, si->shader );
	/* handle custom content/surface flags */
	bspShader.surfaceFlags = ( surfaceFlags != NULL )? *surfaceFlags : si->surfaceFlags;
	bspShader.contentFlags = ( contentFlags != NULL )? *contentFlags : si->contentFlags;

	/* recursively emit any damage shaders */
	if ( !strEmptyOrNull( si->damageShader ) ) {
		Sys_FPrintf( SYS_VRB, "Shader %s has damage shader %s\n", si->shader.c_str(), si->damageShader );
		EmitShader( si->damageShader, NULL, NULL );
	}

	/* return index */
	return i;
}



/*
   EmitPlanes()
   there is no opportunity to discard planes, because all of the original
   brushes will be saved in the map
 */

static void EmitPlanes(){
	bspPlanes.reserve( mapplanes.size() );
	/* walk plane list */
	for ( const plane_t& plane : mapplanes )
	{
		bspPlanes.push_back( plane.plane );
	}

	/* emit some statistics */
	Sys_FPrintf( SYS_VRB, "%9zu BSP planes\n", bspPlanes.size() );
}



/*
   EmitLeaf()
   emits a leafnode to the bsp file
 */

static void EmitLeaf( node_t *node ){
	bspLeaf_t& leaf = bspLeafs.emplace_back();

	leaf.cluster = node->cluster;
	leaf.area = node->area;

	/* emit bounding box */
	leaf.minmax.maxs = node->minmax.maxs;
	leaf.minmax.mins = node->minmax.mins;

	/* emit leaf brushes */
	leaf.firstBSPLeafBrush = bspLeafBrushes.size();
	for ( const brush_t& b : node->brushlist )
	{
		bspLeafBrushes.push_back( b.original->outputNum );
	}

	leaf.numBSPLeafBrushes = bspLeafBrushes.size() - leaf.firstBSPLeafBrush;

	/* emit leaf surfaces */
	if ( node->opaque ) {
		return;
	}

	/* add the drawSurfRef_t drawsurfs */
	leaf.firstBSPLeafSurface = bspLeafSurfaces.size();
	for ( const drawSurfRef_t *dsr = node->drawSurfReferences; dsr; dsr = dsr->nextRef )
	{
		bspLeafSurfaces.push_back( dsr->outputNum );
	}

	leaf.numBSPLeafSurfaces = bspLeafSurfaces.size() - leaf.firstBSPLeafSurface;
}


/*
   EmitDrawNode_r()
   recursively emit the bsp nodes
 */

static int EmitDrawNode_r( node_t *node ){
	/* check for leafnode */
	if ( node->planenum == PLANENUM_LEAF ) {
		EmitLeaf( node );
		return -int( bspLeafs.size() );
	}

	/* emit a node */
	const int id = bspNodes.size();
	{
		bspNode_t& bnode = bspNodes.emplace_back();

		bnode.minmax.mins = node->minmax.mins;
		bnode.minmax.maxs = node->minmax.maxs;

		if ( node->planenum & 1 ) {
			Error( "WriteDrawNodes_r: odd planenum" );
		}
		bnode.planeNum = node->planenum;
	}

	//
	// recursively output the other nodes
	//
	for ( int i = 0; i < 2; i++ )
	{
		// reference node by id, as it may be reallocated
		if ( node->children[i]->planenum == PLANENUM_LEAF ) {
			bspNodes[id].children[i] = -int( bspLeafs.size() + 1 );
			EmitLeaf( node->children[i] );
		}
		else
		{
			bspNodes[id].children[i] = bspNodes.size();
			EmitDrawNode_r( node->children[i] );
		}
	}

	return id;
}



/*
   ============
   SetModelNumbers
   ============
 */
void SetModelNumbers(){
	int models = 1;
	for ( std::size_t i = 1; i < entities.size(); ++i ) {
		if ( !entities[i].brushes.empty() || entities[i].patches ) {
			char value[16];
			sprintf( value, "*%i", models );
			models++;
			entities[i].setKeyValue( "model", value );
		}
	}

}




/*
   SetLightStyles()
   sets style keys for entity lights
 */

void SetLightStyles(){
	int j, numStyles;
	char value[ 10 ];
	char lightTargets[ MAX_SWITCHED_LIGHTS ][ 64 ];
	int lightStyles[ MAX_SWITCHED_LIGHTS ];
	int numStrippedLights = 0;

	/* -keeplights option: force lights to be kept and ignore what the map file says */
	if ( keepLights ) {
		entities[0].setKeyValue( "_keepLights", "1" );
	}

	/* ydnar: determine if we keep lights in the bsp */
	entities[ 0 ].read_keyvalue( keepLights, "_keepLights" );

	/* any light that is controlled (has a targetname) must have a unique style number generated for it */
	numStyles = 0;
	for ( std::size_t i = 1; i < entities.size(); ++i )
	{
		entity_t& e = entities[ i ];

		if ( !e.classname_prefixed( "light" ) ) {
			continue;
		}
		const char *t;
		if ( !e.read_keyvalue( t, "targetname" ) ) {
			/* ydnar: strip the light from the BSP file */
			if ( !keepLights ) {
				e.epairs.clear();
				numStrippedLights++;
			}

			/* next light */
			continue;
		}

		/* get existing style */
		const int style = e.intForKey( "style" );
		if ( style < LS_NORMAL || style > LS_NONE ) {
			Error( "Invalid lightstyle (%d) on entity %zu", style, i );
		}

		/* find this targetname */
		for ( j = 0; j < numStyles; j++ )
			if ( lightStyles[ j ] == style && strEqual( lightTargets[ j ], t ) ) {
				break;
			}

		/* add a new style */
		if ( j >= numStyles ) {
			if ( numStyles == MAX_SWITCHED_LIGHTS ) {
				Error( "MAX_SWITCHED_LIGHTS (%d) exceeded, reduce the number of lights with targetnames", MAX_SWITCHED_LIGHTS );
			}
			strcpy( lightTargets[ j ], t );
			lightStyles[ j ] = style;
			numStyles++;
		}

		/* set explicit style */
		sprintf( value, "%d", 32 + j );
		e.setKeyValue( "style", value );

		/* set old style */
		if ( style != LS_NORMAL ) {
			sprintf( value, "%d", style );
			e.setKeyValue( "switch_style", value );
		}
	}

	/* emit some statistics */
	Sys_FPrintf( SYS_VRB, "%9d light entities stripped\n", numStrippedLights );
}



/*
   BeginBSPFile()
   starts a new bsp file
 */

void BeginBSPFile(){
}



/*
   EndBSPFile()
   finishes a new bsp and writes to disk
 */

void EndBSPFile( bool do_write ){
	Sys_FPrintf( SYS_VRB, "--- EndBSPFile ---\n" );

	EmitPlanes();

	numBSPEntities = entities.size();
	UnparseEntities();

	if ( do_write ) {
		/* write the surface extra file */
		WriteSurfaceExtraFile( source );

		/* write the bsp */
		auto path = StringOutputStream( 256 )( source, ".bsp" );
		Sys_Printf( "Writing %s\n", path.c_str() );
		WriteBSPFile( path );
	}
}



/*
   EmitBrushes()
   writes the brush list to the bsp
 */

void EmitBrushes( entity_t& e )
{
	/*
	for ( const brush_t &brush : e.brushes )
	{
		for ( const side_t &side : brush.sides )
		{
			Plane3f &plane = bspPlanes.emplace_back();
			plane = (Plane3f)side.plane;
		}
	}
	*/
}

/*
   EmitTextureData()
   writes the entitiy partitions
 */
void EmitTextureData( shaderInfo_t shader )
{
	std::string tex;
	std::size_t index;
	tex = shader.shader.c_str();

	savedTextures.push_back( tex );

	tex.erase(tex.begin(), tex.begin() + 9);
	std::replace(tex.begin(), tex.end(), '/', '\\');

	index = tex.find('\\');
	if (index != std::string::npos)
	{
		std::replace(tex.begin(), tex.begin() + index, '_', '\\');
	}

	/* Check if it's already saved */
	std::string table = std::string( r2::bspTextureDataData.begin(), r2::bspTextureDataData.end() );
	index = table.find(tex);
	if (index != std::string::npos)
		return;

	/* Add to Table */
	StringOutputStream data;
	data << tex.c_str();
	std::vector<char> str = { data.begin(), data.end() + 1 };

	r2::bspTextureDataTable.emplace_back( r2::bspTextureDataData.size() );
	r2::bspTextureDataData.insert( r2::bspTextureDataData.end(), str.begin(), str.end() );

	r2::bspTextureData_t &td = r2::bspTextureData.emplace_back();
	td.name_index = r2::bspTextureDataTable.size() - 1;
	td.sizeX = shader.shaderImage->width;
	td.sizeY = shader.shaderImage->height;
	td.visibleX = shader.shaderImage->width;
	td.visibleY = shader.shaderImage->height;
	td.flags = 512; // idk
}

/*
   EmitMaterialSort()
   Tries to create a material sort of the last texture
 */
uint16_t EmitMaterialSort( const char* texture )
{
	std::string tex = texture;

	std::string textureData = { r2::bspTextureDataData.begin(), r2::bspTextureDataData.end() };

	/* Find the texture path in the textureData lump */
	uint16_t index = 0;
	for ( std::string &path : savedTextures )
	{
		if ( path == tex )
			break;

		index++;
	}

	/* Check if the material sort we need already exists */
	std::size_t pos = 0;
	for ( r2::bspMaterialSort_t &ms : r2::bspMaterialSorts )
	{
		if ( ms.textureData == index )
			return pos;

		pos++;
	}
	
	
	r2::bspMaterialSort_t &ms = r2::bspMaterialSorts.emplace_back();
	ms.textureData = index;

	return r2::bspMaterialSorts.size() - 1;
}

/*
   EmitEntityPartitions()
   writes the entitiy partitions
 */
void EmitEntityPartitions()
{
	r2::bspEntityPartitions_t& p = r2::bspEntityPartitions.emplace_back();
	memcpy( p.partitions, "01* env fx script snd spawn", 27 );
}

/*
   EmitEntity()
   Saves an entity into it's corresponding .ent file or the lump the the .bsp
 */
void EmitEntity( const entity_t &e )
{
	StringOutputStream data;
	data << "{\n";
	for ( const epair_t &pair : e.epairs)
	{
		data << "\"" << pair.key.c_str() << "\" \"" << pair.value.c_str() << "\"\n";
	}
	data << "}\n";


	std::vector<char> str = { data.begin(), data.end() };
	r2::bspEntities.insert(r2::bspEntities.end(), str.begin(), str.end());

}

/* helpers */
bool VertexLarger( Vector3 a, Vector3 b )
{
	if (a.x() > b.x())
		if (a.y() > b.y())
			if (a.z() > b.z())
				return true;

	return false;
}

struct tempMesh_t
{
	MinMax minmax;
	shaderInfo_t* shaderInfo;
	/* Parallel */
	std::vector<Vector3> Vertices;
	std::vector<Vector3> Normals;
	std::vector<Vector2> UVs;

	std::vector<uint16_t> Triangles;
};


/*
   EmitMeshes()
   writes the mesh list to the bsp
 */
void EmitMeshes( const entity_t& e )
{
	Sys_FPrintf(SYS_VRB, "pain suffering\n");
	for ( const shared::mesh_t &mesh : shared::meshes )
	{
		r2::bspMesh_t &bm = r2::bspMeshes.emplace_back();
		bm.const0 = 4294967040; // :)
		bm.flags = 1051136;
		bm.firstVertex = r2::bspVertexLitBump.size();
		bm.vertexCount = mesh.vertices.size();
		bm.triOffset = r2::bspMeshIndices.size();
		bm.triCount = mesh.triangles.size() / 3;


		/* Emit textrue related structs */
		EmitTextureData( *mesh.shaderInfo );

		bm.materialOffset = EmitMaterialSort( mesh.shaderInfo->shader.c_str() );

		MinMax aabb;

		/* Save vertices and vertexnormals */
		for ( std::size_t i = 0; i < mesh.vertices.size(); i++ )
		{
			Vector3 vertex = mesh.vertices.at( i ).xyz;
			/* Check against aabb */
			aabb.extend( vertex );

			r2::bspVertexLitBump_t &lv = r2::bspVertexLitBump.emplace_back();
			lv.minusOne = -1;
			lv.uv0 = mesh.vertices.at(i).st;

			/* Save vert */
			for ( uint16_t j = 0; j < r2::bspVertices.size(); j++ )
			{
				if ( VectorCompare( vertex, r2::bspVertices.at( j ) ) )
				{
					lv.vertexIndex = j;
					goto normal;
				}
			}

			{
				lv.vertexIndex = r2::bspVertices.size();
				r2::bspVertices.emplace_back( mesh.vertices.at(i).xyz );
			}

			normal:;

			for ( uint16_t j = 0; j < r2::bspVertexNormals.size(); j++ )
			{
				if ( VectorCompare( mesh.vertices.at( i ).normal, r2::bspVertexNormals.at( j ) ) )
				{
					lv.normalIndex = j;
					goto end;
				}
			}

			{
				lv.normalIndex = r2::bspVertexNormals.size();
				r2::bspVertexNormals.emplace_back( mesh.vertices.at( i ).normal );
			}

			end:;
		}

		/* Save triangles */
		for ( uint16_t triangle : mesh.triangles )
		{
			for ( uint32_t j = 0; j < r2::bspVertexLitBump.size(); j++ )
			{
				if ( VectorCompare( r2::bspVertices.at( r2::bspVertexLitBump.at( j ).vertexIndex ),mesh.vertices.at( triangle ).xyz ) )
				{
					r2::bspMeshIndex_t& index = r2::bspMeshIndices.emplace_back();
					index = j;
					break;
				}
			}
		}

		/* Save MeshBounds */
		r2::bspMeshBounds_t& mb = r2::bspMeshBounds.emplace_back();
		mb.origin = ( aabb.maxs + aabb.mins ) / 2;
		mb.extents = ( aabb.maxs - aabb.mins ) / 2;
	}
}
/*
   EmitObjReferences()
   writes obj references used by vis tree
 */
void EmitObjReferences()
{
	/* Meshes */
	for ( uint16_t i = 0; i < r2::bspMeshBounds.size(); i++ )
	{
		r2::bspMeshBounds_t mesh = r2::bspMeshBounds.at( i );

		r2::bspObjReferenceBounds_t& refBounds = r2::bspObjReferenceBounds.emplace_back();
		refBounds.mins = mesh.origin - mesh.extents;
		refBounds.maxs = mesh.origin + mesh.extents;

		r2::bspObjReferences_t& ref = r2::bspObjReferences.emplace_back();
		ref = i;
	}

	/* Props */
	for ( uint16_t i = 0; i < r2::GameLump.propCount; i++ )
	{
		r2::bspObjReferenceBounds_t& refBounds = r2::bspObjReferenceBounds.emplace_back();
		refBounds.mins = Vector3(-1000,-1000,-1000);
		refBounds.maxs = Vector3(1000,1000,1000);

		r2::bspObjReferences_t& ref = r2::bspObjReferences.emplace_back();
		ref = r2::bspMeshBounds.size() + i;
	}
}

void EmitModels()
{
	r2::bspModel_t &m = r2::bspModels.emplace_back();
	m.meshCount = r2::bspMeshes.size();
}

void EmitLevelInfo()
{
	r2::bspLevelInfo_t &li = r2::bspLevelInfo.emplace_back();
	// These work on small maps, larger maps still crash
	li.unk0 = r2::bspObjReferenceBounds.size();
	li.unk1 = r2::bspObjReferenceBounds.size();
	li.unk3 = r2::bspObjReferenceBounds.size();
	li.propCount = r2::GameLump.propCount;
}

void SetUpGameLump()
{
	r2::GameLump.version = 1;
	memcpy(r2::GameLump.magic, "prps", 4 );
	r2::GameLump.const0 = 851968;
}

void EmitProp( const entity_t &e )
{
	const char* p;
	e.read_keyvalue(p, "model");
	char path[128];
	strncpy(path, p, 128);

	uint16_t index = 0;
	bool found = false;
	for ( uint32_t i = 0; i < r2::GameLump.pathCount; i++ )
	{
		if ( strncmp( r2::GameLump.paths.at(i).path, path, 128) == 0 )
		{
			found = true;
			break;
		}

		index++;
	}

	if ( !found )
	{
		index = r2::GameLump.paths.size();
		r2::GameLump.pathCount++;
		r2::GameLump_Path newPath;
		strncpy(newPath.path, path,128);
		r2::GameLump.paths.emplace_back(newPath);
	}

	r2::GameLump.propCount++;
	r2::GameLump_Prop& prop = r2::GameLump.props.emplace_back();
	prop.scale = 1;
	prop.fadeScale = -1;
	prop.flags = 84;
	prop.solidMode = 6;
	prop.cpuLevel[0] = -1;
	prop.cpuLevel[1] = -1;
	prop.gpuLevel[0] = -1;
	prop.gpuLevel[1] = -1;
	prop.modelName = index;

}

/* I call this Right click -> copy as c++ array */
void EmitStubs()
{
	/* World Lights */
	{
		constexpr std::array<uint8_t, 1008> data = {
			0x00, 0x00, 0xC0, 0x42, 0x00, 0x00, 0x10, 0x42, 0x00, 0x80, 0x82, 0x43, 0xCE, 0xCC, 0x4C, 0x3E,
			0xCE, 0xCC, 0x4C, 0x3E, 0xCE, 0xCC, 0x4C, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xDF, 0x00, 0xC0, 0xC2, 0x99, 0xFB, 0x0F, 0xC2, 0x00, 0x80, 0x82, 0x43, 0xCE, 0xCC, 0x4C, 0x3E,
			0xCE, 0xCC, 0x4C, 0x3E, 0xCE, 0xCC, 0x4C, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC0, 0x42, 0x00, 0x00, 0x10, 0x42, 0x00, 0x80, 0x82, 0x43, 0x00, 0x00, 0x80, 0x40,
			0x00, 0x00, 0x80, 0x40, 0x00, 0x00, 0x80, 0x40, 0x1D, 0xBF, 0xAB, 0xBE, 0x92, 0x8B, 0x06, 0x3F,
			0xFC, 0x25, 0x48, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xDF, 0x00, 0xC0, 0xC2, 0x99, 0xFB, 0x0F, 0xC2, 0x00, 0x80, 0x82, 0x43, 0x00, 0x00, 0x80, 0x40,
			0x00, 0x00, 0x80, 0x40, 0x00, 0x00, 0x80, 0x40, 0xC7, 0xEB, 0x8B, 0x3E, 0xEB, 0xD3, 0x05, 0xBF,
			0x62, 0xB7, 0x4E, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xC2, 0x00, 0x00, 0x60, 0xC1, 0x00, 0x00, 0xC2, 0x42, 0x3A, 0x19, 0x00, 0x46,
			0x4B, 0x16, 0xC3, 0x46, 0xF6, 0x55, 0x08, 0x47, 0x22, 0xD1, 0x18, 0x3E, 0x41, 0x84, 0x52, 0xBF,
			0x41, 0x91, 0x0C, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB2, 0x8F, 0x70, 0x3F,
			0x43, 0x1D, 0xAF, 0x3E, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x48, 0x43, 0x00, 0x00, 0x80, 0x3F,
			0x65, 0xF0, 0x1F, 0xBC, 0x8F, 0xBA, 0xC7, 0x37, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
			0x00, 0x00, 0x18, 0xC2, 0x00, 0x00, 0x85, 0x43, 0x00, 0x00, 0x8E, 0x43, 0xA5, 0x7B, 0x20, 0x47,
			0x27, 0x68, 0xF4, 0x47, 0x7E, 0xCD, 0x2A, 0x48, 0x26, 0x86, 0x6A, 0x3E, 0xD4, 0x96, 0x2B, 0xBF,
			0x60, 0xB5, 0x34, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB2, 0x8F, 0x70, 0x3F,
			0x43, 0x1D, 0xAF, 0x3E, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0xAF, 0x43, 0x00, 0x00, 0x80, 0x3F,
			0x98, 0xC9, 0xB6, 0xBB, 0x63, 0x6F, 0x02, 0x37, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
			0x00, 0x00, 0x2A, 0x43, 0x00, 0x00, 0x56, 0x43, 0x00, 0x00, 0xB4, 0xC2, 0x34, 0x9D, 0xA4, 0x3E,
			0xC6, 0x6B, 0xE7, 0x3E, 0x00, 0xFF, 0xFE, 0x3E, 0x92, 0x2A, 0xB6, 0xBE, 0x60, 0x46, 0x13, 0xBF,
			0x07, 0x8C, 0x3C, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB2, 0x8F, 0x70, 0x3F,
			0x43, 0x1D, 0xAF, 0x3E, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0xC8, 0x43, 0x00, 0x00, 0x80, 0x3F,
			0x54, 0xA9, 0xF9, 0xB8, 0x8F, 0xBA, 0xC7, 0xB6, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
			0x00, 0x00, 0x98, 0xC1, 0x00, 0x00, 0xD8, 0x41, 0x00, 0x00, 0x98, 0xC1, 0x01, 0x40, 0x1C, 0x47,
			0x3C, 0x95, 0xDF, 0x46, 0x06, 0x81, 0x88, 0x46, 0x64, 0xF5, 0x1F, 0x3F, 0xD0, 0x05, 0xFD, 0x3E,
			0x2B, 0xBD, 0x1A, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7D, 0x1B, 0x44, 0x3F,
			0xBA, 0x8D, 0x24, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x96, 0x43, 0x00, 0x00, 0x80, 0x3F,
			0xE3, 0x70, 0x26, 0xB9, 0x63, 0x89, 0x31, 0xB7, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F,
			0x00, 0x00, 0x92, 0xC2, 0x00, 0x00, 0x4C, 0xC3, 0x00, 0x00, 0x80, 0x41, 0x01, 0x50, 0x43, 0x48,
			0x05, 0xD1, 0x04, 0x48, 0x47, 0xA1, 0xAA, 0x47, 0xEE, 0x1C, 0x0B, 0x3F, 0xD0, 0xB3, 0x32, 0x3F,
			0x14, 0xBD, 0xEE, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7D, 0x1B, 0x44, 0x3F,
			0xBA, 0x8D, 0x24, 0x3F, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x5E, 0x43, 0x00, 0x00, 0x80, 0x3F,
			0x94, 0xEB, 0x60, 0xB9, 0xB5, 0x1A, 0xA2, 0xB7, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F
		};
		r2::bspWorldLights_stub = { data.begin(), data.end() };
	}
	/* Tricoll tris */
	{
		constexpr std::array<uint8_t, 384> data = {
			0x00, 0x08, 0x02, 0x00, 0x01, 0x04, 0x04, 0x40, 0x00, 0x08, 0x02, 0x20, 0x01, 0x04, 0x04, 0x00,
			0x01, 0x08, 0x02, 0x40, 0x00, 0x04, 0x04, 0x40, 0x03, 0x08, 0x02, 0x40, 0x02, 0x04, 0x04, 0x40,
			0x00, 0x10, 0x02, 0x00, 0x01, 0x0C, 0x08, 0x40, 0x02, 0x08, 0x06, 0x10, 0x02, 0x0C, 0x02, 0x50,
			0x00, 0x08, 0x02, 0x20, 0x01, 0x04, 0x04, 0x00, 0x00, 0x08, 0x02, 0x20, 0x01, 0x04, 0x04, 0x00,
			0x00, 0x08, 0x02, 0x20, 0x01, 0x04, 0x04, 0x00, 0x00, 0x08, 0x02, 0x40, 0x01, 0x04, 0x04, 0x40,
			0x00, 0x08, 0x02, 0x40, 0x01, 0x04, 0x04, 0x40, 0x00, 0x08, 0x02, 0x40, 0x01, 0x04, 0x04, 0x40,
			0x02, 0x04, 0x0E, 0x20, 0x03, 0x14, 0x0C, 0x10, 0x04, 0x14, 0x08, 0x40, 0x04, 0x0C, 0x0A, 0x40,
			0x01, 0x1C, 0x10, 0x40, 0x00, 0x20, 0x02, 0x00, 0x04, 0x08, 0x06, 0x50, 0x04, 0x04, 0x04, 0x10,
			0x00, 0x04, 0x04, 0x00, 0x01, 0x08, 0x02, 0x20, 0x02, 0x08, 0x06, 0x00, 0x02, 0x04, 0x04, 0x40,
			0x01, 0x20, 0x0E, 0x40, 0x00, 0x04, 0x10, 0x40, 0x04, 0x14, 0x02, 0x40, 0x04, 0x10, 0x0A, 0x40,
			0x03, 0x18, 0x0A, 0x10, 0x02, 0x1C, 0x02, 0x50, 0x04, 0x04, 0x04, 0x20, 0x04, 0x08, 0x06, 0x10,
			0x01, 0x04, 0x04, 0x40, 0x00, 0x08, 0x02, 0x00, 0x03, 0x04, 0x04, 0x40, 0x02, 0x08, 0x02, 0x40,
			0x00, 0x08, 0x02, 0x40, 0x01, 0x04, 0x04, 0x40, 0x00, 0x08, 0x02, 0x40, 0x01, 0x04, 0x04, 0x40,
			0x00, 0x04, 0x04, 0x40, 0x01, 0x08, 0x02, 0x40, 0x02, 0x04, 0x04, 0x20, 0x03, 0x08, 0x02, 0x10,
			0x00, 0x08, 0x02, 0x40, 0x01, 0x04, 0x04, 0x40, 0x00, 0x08, 0x02, 0x00, 0x01, 0x04, 0x04, 0x40,
			0x01, 0x04, 0x04, 0x40, 0x00, 0x08, 0x02, 0x40, 0x02, 0x08, 0x02, 0x50, 0x03, 0x04, 0x04, 0x10,
			0x01, 0x10, 0x06, 0x40, 0x00, 0x04, 0x08, 0x40, 0x02, 0x0C, 0x02, 0x50, 0x03, 0x08, 0x02, 0x10,
			0x00, 0x08, 0x02, 0x00, 0x01, 0x04, 0x04, 0x40, 0x00, 0x08, 0x02, 0x00, 0x01, 0x04, 0x04, 0x40,
			0x00, 0x08, 0x02, 0x20, 0x01, 0x04, 0x04, 0x00, 0x00, 0x08, 0x02, 0x00, 0x01, 0x04, 0x04, 0x40,
			0x00, 0x08, 0x02, 0x40, 0x01, 0x04, 0x04, 0x40, 0x00, 0x08, 0x02, 0x20, 0x01, 0x04, 0x04, 0x00,
			0x00, 0x08, 0x02, 0x00, 0x01, 0x04, 0x04, 0x40, 0x00, 0x08, 0x02, 0x00, 0x01, 0x04, 0x04, 0x40,
			0x04, 0x08, 0x02, 0x10, 0x02, 0x08, 0x06, 0x20, 0x00, 0x08, 0x02, 0x20, 0x01, 0x04, 0x08, 0x00,
			0x01, 0x14, 0x0C, 0x40, 0x01, 0x10, 0x0A, 0x40, 0x00, 0x10, 0x04, 0x40, 0x00, 0x0C, 0x08, 0x40,
			0x03, 0x10, 0x02, 0x50, 0x04, 0x0C, 0x04, 0x10, 0x00, 0x08, 0x02, 0x40, 0x01, 0x04, 0x04, 0x40
		};
		r2::bspTricollTris_stub = { data.begin(), data.end() };
	}
	/* Tricoll Nodes */
	{
		constexpr std::array<uint8_t, 704> data = {
			0x00, 0x00, 0x80, 0xFD, 0x00, 0x00, 0x00, 0x80, 0x01, 0x78, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xFD, 0x00, 0x00, 0x00, 0x80, 0x01, 0x78, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x80, 0x01, 0x78, 0x81, 0x02, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x80, 0x01, 0x78, 0x81, 0x02, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0xFD, 0x00, 0x80, 0x01, 0x78, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0xFD, 0x00, 0x80, 0x01, 0x78, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x80, 0x01, 0x78, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x80, 0x01, 0x78, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
			0x80, 0xFD, 0x00, 0x00, 0x00, 0x78, 0x00, 0x80, 0x00, 0x00, 0x01, 0x78, 0x80, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0x75, 0x00, 0x80, 0x81, 0x02, 0x01, 0x78, 0x00, 0x00, 0x00, 0x00,
			0x80, 0xFD, 0x00, 0x00, 0x80, 0xFD, 0x00, 0x80, 0x00, 0x00, 0x01, 0x78, 0x00, 0x78, 0x00, 0x00,
			0x80, 0x02, 0x00, 0x00, 0x80, 0xFD, 0x00, 0x80, 0x00, 0x00, 0x01, 0x78, 0x00, 0x78, 0x00, 0x00,
			0x40, 0x01, 0xC0, 0xFE, 0x00, 0x00, 0x00, 0x80, 0x81, 0x02, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
			0x40, 0x01, 0xC0, 0xFE, 0x00, 0x00, 0x00, 0x80, 0x81, 0x02, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
			0xC0, 0xFE, 0x40, 0x01, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x81, 0x02, 0x00, 0x78, 0x00, 0x00,
			0xC0, 0xFE, 0x40, 0x01, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x81, 0x02, 0x00, 0x78, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xFD, 0x80, 0xFD, 0x00, 0x80, 0x01, 0x78, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0x75, 0x00, 0x80, 0x01, 0x78, 0x81, 0x02, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xFD, 0x00, 0x78, 0x00, 0x80, 0x01, 0x78, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x80, 0x02, 0x80, 0xFD, 0x00, 0x80, 0x01, 0x78, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xFD, 0x00, 0x00, 0x00, 0x80, 0x01, 0x78, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xFD, 0x00, 0x00, 0x00, 0x80, 0x01, 0x78, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x80, 0x01, 0x78, 0x81, 0x02, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x80, 0x01, 0x78, 0x81, 0x02, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x80, 0x81, 0x02, 0x01, 0x78, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x80, 0x81, 0x02, 0x01, 0x78, 0x00, 0x00, 0x00, 0x00,
			0x80, 0xFD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x78, 0x80, 0x02, 0x00, 0x00,
			0x80, 0xFD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x78, 0x80, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x80, 0x81, 0x02, 0x01, 0x78, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x80, 0x81, 0x02, 0x01, 0x78, 0x00, 0x00, 0x00, 0x00,
			0x80, 0xFD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x78, 0x00, 0x78, 0x00, 0x00,
			0x80, 0xFD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x78, 0x00, 0x78, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0xFD, 0x00, 0x80, 0x00, 0x00, 0x01, 0x78, 0x00, 0x78, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0xFD, 0x00, 0x80, 0x00, 0x00, 0x01, 0x78, 0x00, 0x78, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x80, 0x00, 0x00, 0x01, 0x78, 0x80, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x80, 0x00, 0x00, 0x01, 0x78, 0x80, 0x02, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x10, 0x01, 0x10, 0x00, 0x10, 0x00, 0x00,
			0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x10, 0x00, 0x10, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x80, 0x01, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x80, 0x01, 0x10, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x08, 0x00, 0xF8, 0x00, 0x10, 0x7E, 0xA5, 0xA1, 0x16, 0x51, 0x0B, 0x00, 0x00, 0x7E, 0xA5,
			0x00, 0xF8, 0x00, 0x08, 0x00, 0x10, 0x7E, 0xA5, 0xA1, 0x16, 0x51, 0x0B, 0x00, 0x00, 0x7E, 0xA5,
			0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x80, 0x01, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x80, 0x01, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
		};
		r2::bspTricollNodes_stub = { data.begin(), data.end() };
	}
	/* Tricoll Headers */
	{
		constexpr std::array<uint8_t, 1364> data = {
			0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04,
			0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x06, 0x00,
			0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0xF5, 0x46, 0x00, 0x00, 0x00, 0x80,
			0x00, 0x00, 0x20, 0x41, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00,
			0x0F, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0xF0, 0x46, 0x00, 0x00, 0x20, 0xC4, 0x00, 0x00, 0x20, 0x41,
			0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
			0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04,
			0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00,
			0x02, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00,
			0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,
			0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04,
			0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x0A, 0x00,
			0x08, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5, 0xC6, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x20, 0xC4,
			0x00, 0x00, 0x20, 0x41, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00,
			0x37, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x80, 0xF2, 0xC6, 0x00, 0x80, 0xF2, 0xC6, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x20, 0x41,
			0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x0A, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00,
			0x24, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
			0x00, 0x00, 0xF5, 0xC6, 0x00, 0x00, 0x20, 0xC4, 0x00, 0x00, 0x20, 0x41, 0x00, 0x00, 0x04, 0x04,
			0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00,
			0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0xF5, 0xC6,
			0x00, 0x00, 0xF5, 0x46, 0x00, 0x00, 0x20, 0x41, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00,
			0x02, 0x00, 0x00, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00,
			0x51, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00,
			0x34, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5, 0xC6,
			0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0xF5, 0x46, 0x00, 0x00, 0x20, 0x41, 0x00, 0x00, 0x04, 0x04,
			0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5B, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00,
			0x02, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00,
			0x63, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xF5, 0x46, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x20, 0x41,
			0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00,
			0x40, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x46,
			0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x20, 0xC4, 0x00, 0x00, 0x20, 0x41, 0x00, 0x00, 0x04, 0x04,
			0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x6F, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00,
			0x02, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x06, 0x02, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00,
			0x77, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x80, 0x06, 0x02, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x7B, 0x00, 0x00, 0x00,
			0x4A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x06,
			0x02, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x06, 0x02, 0x00, 0x04, 0x00,
			0x02, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x06, 0x02, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00,
			0x87, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x0A, 0x01, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x00,
			0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,
			0x01, 0x00, 0x08, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x8F, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00,
			0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0xA8, 0x47,
			0x00, 0x00, 0x3F, 0x49, 0x00, 0x00, 0x80, 0x43, 0x00, 0x00, 0x00, 0x0A, 0x01, 0x00, 0x04, 0x00,
			0x02, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00, 0x5E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00
		};
		r2::bspTricollHeaders_stub = { data.begin(), data.end() };
	}
	/* LightMap Headers */
	{
		constexpr std::array<uint8_t, 8> data = {
			0x01, 0x00, 0x00, 0x00, 0x00, 0x02, 0x80, 0x00
		};
		r2::bspLightMapHeaders_stub = { data.begin(), data.end() };
	}
	/* CM Grid */
	{
		constexpr std::array<uint8_t, 28> data = {
			0x00, 0x00, 0x30, 0x44, 0xFB, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0x0A, 0x00, 0x00, 0x00,
			0x0A, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00
		};
		r2::bspCMGrid_stub = { data.begin(), data.end() };
	}
	/* CM Grid Cells */
	{
		constexpr std::array<uint8_t, 404> data = {
			0x00, 0x00, 0x01, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x02, 0x00, 0x02, 0x00, 0x04, 0x00, 0x02, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x02, 0x00, 0x01, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
			0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x07, 0x00, 0x01, 0x00,
			0x08, 0x00, 0x05, 0x00
		};
		r2::bspCMGridCells_stub = { data.begin(), data.end() };
	}
	/* CM Grid Sets */
	{
		constexpr std::array<uint8_t, 104> data = {
			0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x02, 0x00, 0x00,
			0x01, 0x00, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x06, 0x00, 0x00,
			0x01, 0x00, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x06, 0x00, 0x00,
			0x00, 0x00, 0x02, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x0B, 0x00, 0x40,
			0x00, 0x00, 0x04, 0x00, 0x01, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x0E, 0x00, 0x00,
			0x00, 0x00, 0x04, 0x00, 0x01, 0x12, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x16, 0x00, 0x00,
			0x00, 0x00, 0x06, 0x00, 0x02, 0x1A, 0x00, 0x00
		};
		r2::bspCMGridSets_stub = { data.begin(), data.end() };
	}
	/* CM Geo Set Bounds */
	{
		constexpr std::array<uint8_t, 208> data = {
			0xE0, 0xF3, 0xE0, 0xF3, 0x00, 0x00, 0x7E, 0xA5, 0x5B, 0x00, 0x2E, 0x00, 0x00, 0x0C, 0x82, 0x5A,
			0x20, 0x0C, 0xE0, 0xF3, 0x00, 0x00, 0x7E, 0xA5, 0x5B, 0x00, 0x2E, 0x00, 0x00, 0x0C, 0x7E, 0xA5,
			0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x80, 0x41, 0x01, 0x41, 0x01, 0x18, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xB0, 0xFE, 0x10, 0xF4, 0x00, 0x80, 0x11, 0x00, 0x11, 0x00, 0x10, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x80, 0x41, 0x01, 0x41, 0x01, 0x18, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xB0, 0xFE, 0x10, 0xF4, 0x00, 0x80, 0x11, 0x00, 0x11, 0x00, 0x10, 0x00, 0x00, 0x00,
			0xE0, 0xF3, 0x20, 0x0C, 0x00, 0x00, 0x7E, 0xA5, 0x5B, 0x00, 0x2E, 0x00, 0x00, 0x0C, 0x7E, 0xA5,
			0x20, 0x0C, 0x20, 0x0C, 0x00, 0x00, 0x7E, 0xA5, 0x5B, 0x00, 0x2E, 0x00, 0x00, 0x0C, 0x82, 0x5A,
			0x00, 0x00, 0xC0, 0xF3, 0x00, 0x00, 0x00, 0x80, 0x01, 0x0C, 0x41, 0x00, 0x80, 0x0C, 0x00, 0x00,
			0x40, 0x00, 0x40, 0x00, 0xC0, 0xF3, 0x00, 0x80, 0x41, 0x0C, 0x41, 0x0C, 0x40, 0x00, 0x00, 0x00,
			0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x80, 0x41, 0x0C, 0x41, 0x0C, 0x40, 0x0C, 0x00, 0x00,
			0xC0, 0xF3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x00, 0x01, 0x0C, 0x80, 0x0C, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x20, 0xF4, 0x00, 0x80, 0x01, 0x0C, 0x01, 0x0C, 0x20, 0x00, 0x00, 0x00
		};
		r2::bspCMGeoSetBounds_stub = { data.begin(), data.end() };
	}
	/* CM Primitives */
	{
		constexpr std::array<uint8_t, 128> data = {
			0x01, 0x00, 0x00, 0x40, 0x01, 0x01, 0x00, 0x40, 0x01, 0x04, 0x00, 0x40, 0x01, 0x05, 0x00, 0x40,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x1D, 0x00, 0x40, 0x02, 0x1C, 0x00, 0x40,
			0x01, 0x16, 0x00, 0x40, 0x01, 0x15, 0x00, 0x40, 0x01, 0x02, 0x00, 0x40, 0x01, 0x03, 0x00, 0x40,
			0x01, 0x06, 0x00, 0x40, 0x01, 0x07, 0x00, 0x40, 0x01, 0x10, 0x00, 0x40, 0x01, 0x0F, 0x00, 0x40,
			0x01, 0x0E, 0x00, 0x40, 0x01, 0x0D, 0x00, 0x40, 0x01, 0x08, 0x00, 0x40, 0x01, 0x0C, 0x00, 0x40,
			0x01, 0x09, 0x00, 0x40, 0x01, 0x0A, 0x00, 0x40, 0x01, 0x14, 0x00, 0x40, 0x01, 0x13, 0x00, 0x40,
			0x01, 0x12, 0x00, 0x40, 0x01, 0x11, 0x00, 0x40, 0x02, 0x1E, 0x00, 0x40, 0x02, 0x1B, 0x00, 0x40,
			0x02, 0x1A, 0x00, 0x40, 0x02, 0x19, 0x00, 0x40, 0x02, 0x18, 0x00, 0x40, 0x02, 0x17, 0x00, 0x40
		};
		r2::bspCMPrimitives_stub = { data.begin(), data.end() };
	}
	/* CM Primitive Bounds */
	{
		constexpr std::array<uint8_t, 512> data = {
			0x00, 0xF4, 0xC0, 0xF3, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x41, 0x00, 0x00, 0x0C, 0x00, 0x00,
			0xC0, 0xF3, 0x00, 0xF4, 0x00, 0x00, 0x00, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00,
			0x00, 0x0C, 0xC0, 0xF3, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x41, 0x00, 0x00, 0x0C, 0x00, 0x00,
			0x40, 0x0C, 0x00, 0xF4, 0x00, 0x00, 0x00, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x00, 0x80, 0x41, 0x01, 0x41, 0x01, 0x08, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xFF, 0x10, 0x00, 0x00, 0x80, 0x19, 0x00, 0x19, 0x00, 0x10, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xB0, 0xFE, 0x10, 0xF4, 0x00, 0x80, 0x11, 0x00, 0x11, 0x00, 0x10, 0x00, 0x00, 0x00,
			0xF0, 0xFF, 0xB0, 0xFE, 0x10, 0xF4, 0x00, 0x80, 0x00, 0x00, 0x11, 0x00, 0x10, 0x00, 0x00, 0x00,
			0xC0, 0xF3, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00,
			0x00, 0xF4, 0x40, 0x0C, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x41, 0x00, 0x00, 0x0C, 0x00, 0x00,
			0x00, 0x00, 0xC0, 0xF3, 0x00, 0x00, 0x00, 0x80, 0x01, 0x0C, 0x41, 0x00, 0x00, 0x0C, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xF4, 0x40, 0x00, 0x00, 0x80, 0x01, 0x0C, 0x00, 0x00, 0x40, 0x0C, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xF4, 0xC0, 0xF3, 0x00, 0x80, 0x01, 0x0C, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xC0, 0xF3, 0x00, 0xF4, 0x00, 0x80, 0x01, 0x0C, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x40, 0x0C, 0x00, 0x00, 0xC0, 0xF3, 0x00, 0x80, 0x41, 0x00, 0x01, 0x0C, 0x40, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0xF4, 0x00, 0x80, 0x01, 0x0C, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0xF3, 0x00, 0x80, 0x01, 0x0C, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x40, 0x0C, 0xC0, 0xF3, 0x00, 0x80, 0x01, 0x0C, 0x41, 0x00, 0x40, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x80, 0x01, 0x0C, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x40, 0x0C, 0x40, 0x00, 0x00, 0x80, 0x01, 0x0C, 0x41, 0x00, 0x40, 0x0C, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x80, 0x0C, 0x00, 0x80, 0x01, 0x0C, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00,
			0x40, 0x0C, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x41, 0x00, 0x01, 0x0C, 0x40, 0x0C, 0x00, 0x00,
			0x00, 0xF4, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x0C, 0x40, 0x0C, 0x00, 0x00,
			0xC0, 0xF3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x00, 0x01, 0x0C, 0x00, 0x0C, 0x00, 0x00,
			0x00, 0xF4, 0x00, 0x00, 0xC0, 0xF3, 0x00, 0x80, 0x00, 0x00, 0x01, 0x0C, 0x40, 0x00, 0x00, 0x00,
			0xC0, 0xF3, 0x00, 0x00, 0x00, 0xF4, 0x00, 0x80, 0x41, 0x00, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x40, 0xF4, 0x00, 0x80, 0x01, 0x0C, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00,
			0x00, 0xF4, 0x00, 0x00, 0x20, 0xF4, 0x00, 0x80, 0x00, 0x00, 0x01, 0x0C, 0x20, 0x00, 0x00, 0x00,
			0x00, 0x0C, 0x00, 0x00, 0x20, 0xF4, 0x00, 0x80, 0x00, 0x00, 0x01, 0x0C, 0x20, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0xF4, 0x00, 0x80, 0x01, 0x0C, 0x01, 0x0C, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x0C, 0x20, 0xF4, 0x00, 0x80, 0x01, 0x0C, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xF4, 0x20, 0xF4, 0x00, 0x80, 0x01, 0x0C, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00
		};
		r2::bspCMPrimitiveBounds_stub = { data.begin(), data.end() };
	}
	/* CM Unique Contents */
	{
		constexpr std::array<uint8_t, 12> data = {
			0x00, 0x00, 0xA3, 0x00, 0x80, 0x02, 0xFB, 0x00, 0x80, 0x02, 0xEB, 0x00
		};
		r2::bspCMUniqueContents_stub = { data.begin(), data.end() };
	}
	/* CM Brushes */
	{
		constexpr std::array<uint8_t, 96> data = {
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0xA0, 0x43, 0x00, 0x00, 0xA0, 0x43, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC3, 0x00, 0x00, 0x80, 0x41, 0x00, 0x00, 0x01, 0x00,
			0x00, 0x00, 0xC0, 0x41, 0x00, 0x00, 0xC0, 0x41, 0x00, 0x00, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
			0x00, 0x00, 0x40, 0x45, 0x00, 0x00, 0x40, 0x45, 0x00, 0x00, 0x40, 0x45, 0x00, 0x00, 0x00, 0x00
		};
		r2::bspCMBrushes_stub = { data.begin(), data.end() };
	}
	/* CM Brush Side Plane Offsets */
	{
		constexpr std::array<uint8_t, 24> data = {
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};
		r2::bspCMBrushSidePlaneOffsets_stub = { data.begin(), data.end() };
	}
	/* CM Brush Side Props */
	{
		constexpr std::array<uint8_t, 60> data = {
			0x03, 0x80, 0x03, 0x80, 0x03, 0x80, 0x03, 0x80, 0x03, 0x00, 0x03, 0x00, 0x03, 0x40, 0x03, 0x40,
			0x03, 0x40, 0x03, 0x40, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00,
			0x03, 0x40, 0x03, 0x40, 0x03, 0x40, 0x03, 0x40, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00,
			0x04, 0x00, 0x04, 0x00, 0x04, 0x40, 0x04, 0x40, 0x04, 0x40, 0x04, 0x40
		};
		r2::bspCMBrushSideProps_stub = { data.begin(), data.end() };
	}
	/* Tricoll Bevel Starts */
	{
		constexpr std::array<uint8_t, 192> data = {
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};
		r2::bspTricollBevelStarts_stub = { data.begin(), data.end() };
	}
	/* LightMap Data Sky */
	{
		for (std::size_t i = 0; i < 524288; i++)
		{
			r2::bspLightMapDataSky_stub.emplace_back(0);
		}
	}
	/* CSM AABB Nodes */
	{
		constexpr std::array<uint8_t, 64> data = {
			0xFF, 0xFF, 0x7F, 0x7F, 0xFF, 0xFF, 0x7F, 0x7F, 0xFF, 0xFF, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0x7F, 0x7F, 0xFF, 0xFF, 0x7F, 0x7F, 0xFF, 0xFF, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00,
			0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00
		};
		r2::bspCSMAABBNodes_stub = { data.begin(), data.end() };
	}
	/* Cell BSP Nodes */
	{
		constexpr std::array<uint8_t, 8> data = {
			0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00
		};
		r2::bspCellBSPNodes_stub = { data.begin(), data.end() };
	}
	/* Cells */
	{
		constexpr std::array<uint8_t, 8> data = {
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF
		};
		r2::bspCells_stub = { data.begin(), data.end() };
	}
	/* Cell AABB Nodes */
	{
		r2::CellAABBNode_t &node = r2::bspCellAABBNodes_stub.emplace_back();
		node.mins = Vector3(-3000, -3000, -3000);
		node.maxs = Vector3(3000, 3000, 3000);
		node.objRefCount = r2::bspObjReferences.size() > 255 ? 255 : r2::bspObjReferences.size();
	}
}
/*
   BeginModel()
   sets up a new brush model
 */

void BeginModel( const entity_t& e ){

}




/*
   EndModel()
   finish a model's processing
 */

void EndModel( const entity_t& e, node_t *headnode ){
	
}
